# -*- coding: utf-8 -*-
"""Initial Statistical Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1locUSpCvkpAtB_ueqabdABJ0_uPi-ZfJ
"""

#mounting google drive
from google.colab import drive
drive.mount('/content/drive')
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
from matplotlib.pyplot import figure
import ipywidgets as widgets
from IPython.display import display
import seaborn as sns
import scipy.stats as stats
import math
import statistics

#Import all file and then create one dataframe.
TeamA1 = pd.read_csv('drive/MyDrive/SMT_Data_Challenge/TeamCSVFiles/TeamA1.csv')
TeamA2 = pd.read_csv('drive/MyDrive/SMT_Data_Challenge/TeamCSVFiles/TeamA2.csv')
TeamA3 = pd.read_csv('drive/MyDrive/SMT_Data_Challenge/TeamCSVFiles/TeamA3.csv')
TeamB = pd.read_csv('drive/MyDrive/SMT_Data_Challenge/TeamCSVFiles/TeamB1.csv')

dfTeam = pd.concat([TeamA1,TeamA2,TeamA3,TeamB])
# dfTeam

dfTeam.head()

dfTeam.head()

#Extract variables
#non-caught plays
CV = dfTeam['cv'].dropna().tolist()
CA = dfTeam['ca'].dropna().tolist()
RV = dfTeam['rv'].dropna().tolist()
RA = dfTeam['ra'].dropna().tolist()
LV = dfTeam['lv'].dropna().tolist()
LA = dfTeam['la'].dropna().tolist()
BV = dfTeam['bv'].dropna().tolist()
BA = dfTeam['ba'].dropna().tolist()

#caught plays
CCV = dfTeam['ccv'].dropna().tolist()
CCA = dfTeam['cca'].dropna().tolist()
RCV = dfTeam['rcv'].dropna().tolist()
RCA= dfTeam['rca'].dropna().tolist()
LCV = dfTeam['lcv'].dropna().tolist()
LCA = dfTeam['lca'].dropna().tolist()
BCV = dfTeam['bcv'].dropna().tolist()
BCA = dfTeam['bca'].dropna().tolist()

dropped = dfTeam['Center and Right Distance (Dropped)'].dropna().tolist()
caught = dfTeam['Center and Right Distance (Caught)'].dropna().tolist()

"""#Calculating T-Tests for all variables, assuming non-equal variance

##Velocity
"""

#Centerfield Velocity
centerv = stats.ttest_ind(a=CV, b=CCV, equal_var=False)
centervp = centerv[1]
centervstat = centerv[0]

#Leftfield Velocity
Leftv = stats.ttest_ind(a=RV, b=RCV, equal_var=False)
Leftvp = Leftv[1]
Leftvstat = Leftv[0]

#Centerfield Velocity
Rightv = stats.ttest_ind(a=LV, b=LCV, equal_var=False)
Rightvp = Rightv[1]
Rightvstat = Rightv[0]

"""##Acceleration"""

#Centerfield Acceleration
centera = stats.ttest_ind(a=CA, b=CCA, equal_var=False)
centerap = centera[1]
centerastat = centera[0]

#Leftfield Acceleration
Lefta = stats.ttest_ind(a=RA, b=RCA, equal_var=False)
Leftap = Lefta[1]
Leftastat = Lefta[0]

#Centerfield Acceleration
Righta = stats.ttest_ind(a=LA, b=LCA, equal_var=False)
Rightap = Righta[1]
Rightastat = Righta[0]

"""##Ball Velocity and Acceleration"""

#Ball Velocity
Ballv = stats.ttest_ind(a=BV, b=BCV, equal_var=False)
Ballvp = Ballv[1]
Ballvstat = Ballv[0]

Balla = stats.ttest_ind(a=BA, b=BCA, equal_var=False)
Ballap = Balla[1]
Ballastat = Balla[0]

"""##T-Test between distance between right and center for both outcomes"""

droppedcaught = stats.ttest_ind(a=dropped, b=caught, equal_var=False)

"""Table of T-Tests"""

##list of varialbles
#Ballv
#Balla
#Righta
#Lefta
#centera
#Rightv
#Leftv
#centerv

Stats = pd.DataFrame()
Stats['Ball Velocity']= Ballv
Stats['Ball Acceleration']= Balla
Stats['Right Acceleration']= Righta
Stats['Left Acceleration']= Lefta
Stats['Center Acceleration']= centera
Stats['Right Velocity']= Rightv
Stats['Left Velocity']= Leftv
Stats['Center Velocity']= centerv
Stats['Distance Between Right and Center'] = droppedcaught
Stats.index = ['Stats', "P-Value"]

def highlight_above_0_05(val):
    if val > 0.01:
        return 'background-color: rgba(61,89,171, .3)'

    else:
        return 'background-color: rgba(238,201,0, .3)'

print("This table shows the p-values (bottom row) between plays wherea catch was made and plays where they were not made")
print("Dropped + Caught is the distance between right and center field for caught and dropped plays. There is no statistical difference")
Stats.style.applymap(highlight_above_0_05,subset=pd.IndexSlice[Stats.index[1], :])