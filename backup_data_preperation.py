# -*- coding: utf-8 -*-
"""Backup Data Preperation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CnZrcfJuu-eA3JBV8S7fTcD7xYrB08PE
"""

#mounting google drive
from google.colab import drive
drive.mount('/content/drive')
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
from matplotlib.pyplot import figure
import ipywidgets as widgets
from IPython.display import display
import seaborn as sns
import math
import numpy as np; np.random.seed(1)
from scipy.spatial import ConvexHull
import scipy.stats as stats

# @title
#List of all data file names included in the challenge to help keep track of which files were excluded.
gamelistA31903 = ['-1903_27_TeamNH_TeamA3.csv','-1903_26_TeamNH_TeamA3.csv','-1903_25_TeamNH_TeamA3.csv',
                  '-1903_18_TeamNI_TeamA3.csv','-1903_17_TeamNI_TeamA3.csv','-1903_16_TeamNI_TeamA3.csv',
                  '-1903_15_TeamNG_TeamA3.csv', '-1903_14_TeamNG_TeamA3.csv','-1903_13_TeamNG_TeamA3.csv']

gamelistA31902 = ['-1902_27_TeamMH_TeamA3.csv','-1902_26_TeamMH_TeamA3.csv','-1902_25_TeamMH_TeamA3.csv',
                  '-1902_12_TeamMI_TeamA3.csv','-1902_11_TeamMI_TeamA3.csv','-1902_10_TeamMI_TeamA3.csv',
                  '-1902_03_TeamMG_TeamA3.csv', '-1902_02_TeamMG_TeamA3.csv','-1902_01_TeamMG_TeamA3.csv']

gamelistA31901 = ['-1901_18_TeamLH_TeamA3.csv','-1901_17_TeamLH_TeamA3.csv','-1901_16_TeamLH_TeamA3.csv',
                  # '-1901_06_TeamLI_TeamA3.csv', missing left fielder info caused error
                  '-1901_05_TeamLI_TeamA3.csv','-1901_04_TeamLI_TeamA3.csv',
                  '-1901_03_TeamLG_TeamA3.csv', '-1901_02_TeamLG_TeamA3.csv','-1901_01_TeamLG_TeamA3.csv']

gamelistA21903 = ['-1903_30_TeamNF_TeamA2.csv','-1903_29_TeamNF_TeamA2.csv','-1903_28_TeamNF_TeamA2.csv',
                  '-1903_07_TeamND_TeamA2.csv','-1903_06_TeamND_TeamA2.csv','-1903_05_TeamND_TeamA2.csv',
                  '-1903_03_TeamNE_TeamA2.csv', '-1903_02_TeamNE_TeamA2.csv','-1903_01_TeamNE_TeamA2.csv']

gamelistA21902 = ['-1902_31_TeamMF_TeamA2.csv','-1902_30_TeamMF_TeamA2.csv','-1902_29_TeamMF_TeamA2.csv',
                  '-1902_21_TeamME_TeamA2.csv','-1902_20_TeamME_TeamA2.csv','-1902_19_TeamME_TeamA2.csv',
                  '-1902_16_TeamMD_TeamA2.csv', '-1902_14_TeamMD_TeamA2.csv','-1902_13_TeamMD_TeamA2.csv']

gamelistA11903 = ['-1903_32_TeamNB_TeamA1.csv','-1903_31_TeamNB_TeamA1.csv','-1903_30_TeamNB_TeamA1.csv',
                  # '-1903_24_TeamNA_TeamA1.csv', Also called an error message not included
                  '-1903_23_TeamNA_TeamA1.csv','-1903_22_TeamNA_TeamA1.csv',
                  '-1903_12_TeamNC_TeamA1.csv', '-1903_11_TeamNC_TeamA1.csv','-1903_04_TeamNC_TeamA1.csv']

gamelistA11902 = ['-1902_28_TeamMC_TeamA1.csv','-1902_26_TeamMC_TeamA1.csv','-1902_24_TeamMA_TeamA1.csv',
                  '-1902_23_TeamMA_TeamA1.csv','-1902_22_TeamMA_TeamA1.csv','-1902_18_TeamMB_TeamA1.csv',
                  '-1902_17_TeamMB_TeamA1.csv']


gamelistB1903 = ['-1903_27_TeamNK_TeamB.csv','-1903_26_TeamNK_TeamB.csv','-1903_25_TeamNK_TeamB.csv',
                  '-1903_21_TeamNL_TeamB.csv','-1903_20_TeamNL_TeamB.csv','-1903_19_TeamNL_TeamB.csv',
                  '-1903_10_TeamNJ_TeamB.csv', '-1903_09_TeamNJ_TeamB.csv','-1903_08_TeamNJ_TeamB.csv']

#on 1902_13
gamelistB1902 = ['-1902_15_TeamMK_TeamB.csv','-1902_14_TeamMK_TeamB.csv','-1902_13_TeamMK_TeamB.csv',
                  '-1902_09_TeamMJ_TeamB.csv','-1902_08_TeamMJ_TeamB.csv','-1902_07_TeamMJ_TeamB.csv',
                  # '-1902_06_TeamML_TeamB.csv', Also had issues with this one
                  # '-1902_05_TeamML_TeamB.csv', also had issues
                 '-1902_04_TeamML_TeamB.csv']

gamelistB1901 = ['-1901_15_TeamLL_TeamB.csv','-1901_14_TeamLL_TeamB.csv','-1901_13_TeamLL_TeamB.csv',
                  '-1901_12_TeamLJ_TeamB.csv','-1901_11_TeamLJ_TeamB.csv','-1901_10_TeamLJ_TeamB.csv',
                  '-1901_09_TeamLK_TeamB.csv', '-1901_08_TeamLK_TeamB.csv',
                #  '-1901_07_TeamLK_TeamB.csv'also had issues
                 ]

gamelistB1900 = [
                # '-1900_09_TeamKK_TeamB.csv', also had issues
                 '-1900_08_TeamKL_TeamB.csv',
                # '-1900_07_TeamKL_TeamB.csv' also had issues
                  # '-1900_06_TeamKL_TeamB.csv', also had issues
                # '-1900_05_TeamKK_TeamB.csv', also had issues
                # '-1900_04_TeamKK_TeamB.csv',
                  # '-1900_03_TeamKJ_TeamB.csv',
                '-1900_02_TeamKJ_TeamB.csv',
                # '-1900_01_TeamKJ_TeamB.csv'
                ]

# @title
#Breaking up the file path which also allows figures to be saved using the game variable
heads = 'drive/MyDrive/SMT_Data_Challenge/smt_data_challenge_2023'

###############################################
game = '-1902_31_TeamMF_TeamA2.csv'
##was 1903_27_TeamNH btw
###only need to change year (1900, 1901, 1902, 1903) and team (A2, A1, A3, B)
playerposfile = 'TeamA2/player_pos-1902_TeamA2'
###############################################

#Importing Game Info File
ginfo = 'game_info'
csvgameinfo = f'game_info{game}'
gameinfo = pd.read_csv(f'{heads}/{ginfo}/{csvgameinfo}')

#Importing Game Events File
g = 'game_events'
csvgamevents = f'game_events{game}'
gameevents = pd.read_csv(f'{heads}/{g}/{csvgamevents}')

#Importing Player Postion File
p = f'player_pos/{playerposfile}'
csvplayerpos = f'player_pos{game}'
player_pos = pd.read_csv(f'{heads}/{p}/{csvplayerpos}')

#Importing Ball Position File
b = 'ball_pos'
csvballpos = f'ball_pos{game}'
ballpos = pd.read_csv(f'{heads}/{b}/{csvballpos}')

# #Extracting
# centerfieldpos = player_pos[player_pos['player_position'] == 8].copy()
# leftpos = player_pos[player_pos['player_position'] == 7].copy()
# rightpos =  player_pos[player_pos['player_position'] == 9].copy()

#Extracting Outfielder Data  from the Game Events Table
centerfield = gameevents[gameevents['player_position'] == 8].copy()
leftfield = gameevents[gameevents['player_position'] == 7].copy()
rightfield = gameevents[gameevents['player_position'] == 9].copy()

#Extracting all plays in which an outfielder aquired the ball
outfielders = gameevents[(gameevents['player_position'] == 8) | (gameevents['player_position']== 7) | (gameevents['player_position']== 9)].copy()
outfielders.sort_values(by = 'timestamp')
# outfielders.head()
#Extracting only the playid values
outfieldersplays = outfielders['play_id'].unique
outfieldersplays = np.unique(outfielders['play_id'])

def eventstowords(data):
  """
  Creates a list which describes the plays in words.

  Inputs:
  - data (DataFrame): DataFrame containing data.

  Returns:
  - columnnew (List): This is a list which can be added to the input dataframe
  """
  columnnew = []
  for index, row in data.iterrows():
    if row['event'] == 1:
      columnnew.append('pitch')

    elif row['event'] == 2:
      columnnew.append('Ball Aquired')

    elif row['event'] == 3:
      columnnew.append('Throw')

    elif row['event'] == 4:
      columnnew.append('Ball Hit into Play')

    elif row['event'] == 5:
      columnnew.append('End of Play')

    elif row['event'] == 6:
      columnnew.append('Pick Off Throw')

    elif row['event'] == 7:
      columnnew.append('Ball Aquired - unknown Field Position')

    elif row['event'] == 8:
      columnnew.append('Throw - Unknown Field Position')

    elif row['event'] == 9:
      columnnew.append('Ball Deflection')

    elif row['event'] == 10:
      columnnew.append('Ball Deflection off Wall')

    elif row['event'] == 11:
      columnnew.append('Home Run')

    elif row['event'] == 16:
      columnnew.append('Ball Bounce')
    else:
      columnnew.append('Uknown')
  return columnnew

def playeridnumber(data, gameinfo):
  """
  Adds a column to the dataframe which lists player identification numbers.

  Inputs:
  - data (DataFrame): DataFrame containing data.
  - gameinfo (DataFrame): This is the game info table which was imported from a csv.

  Returns:
  - data2 (DataFrame): Updated dataframe
  """

  columnidea = []
  for index, row in data.iterrows():
    #figure out play number and index location in the data frame.
    playnumber = row['Play_per_game']
    indexnumber = gameinfo[gameinfo['play_per_game'] == playnumber].index[0]

    #Extract player_id numbers for each position
    centerfield = gameinfo['center_field'][indexnumber]
    leftfield = gameinfo['left_field'][indexnumber]
    rightfield = gameinfo['right_field'][indexnumber]
    first = gameinfo['first_base'][indexnumber]
    second = gameinfo['second_base'][indexnumber]
    third = gameinfo['third_base'][indexnumber]
    short = gameinfo['shortstop'][indexnumber]
    catcher = gameinfo['catcher'][indexnumber]
    pitcher = gameinfo['pitcher'][indexnumber]
    batter = 'batter'
    runnerfirst = 'first base runner'
    runnersecond = 'second base runner'
    runnerthird = 'third base runner'
    balleventnoplayer = 'ball event no player'

    #Input player_id into the list.
    if  row['Player'] == 1:
      playeridentity = pitcher
    if  row['Player'] == 2:
      playeridentity = catcher
    if  row['Player'] == 3:
      playeridentity = first
    if  row['Player'] == 4:
      playeridentity = second
    if  row['Player'] == 5:
      playeridentity = third
    if  row['Player'] == 6:
      playeridentity = short
    if  row['Player'] == 7:
      playeridentity = leftfield
    if  row['Player'] == 8:
      playeridentity = centerfield
    if  row['Player'] == 9:
      playeridentity = rightfield
    if  row['Player'] == 10:
      playeridentity = batter
    if  row['Player'] == 11:
      playeridentity = runnerfirst
    if  row['Player'] == 12:
      playeridentity = runnersecond
    if  row['Player'] == 13:
      playeridentity = runnerthird
    if  row['Player'] == 255:
      playeridentity = balleventnoplayer
    if row['Words'] == 'End of Play':
      playeridentity = 'End of Play'

    columnidea.append(playeridentity)


  data['Player Identity'] = columnidea
  data2 = data.reset_index()
  return data2

def diffs(key, DROPPEDOUTFIELDPLAYS):
  """
  Calculates the stepwise distances for x y and z positions and adds them to a dicionary.

  Inputs:
  - key (Dictionary Key): Key describing a play_id.
  - DROPPEDOUTFIELDPLAYS (Dictionary): This is the game info table which was imported from a csv.

  Returns:
  - DROPPEDOUTFIELDPLAYS (Dictionary): Updated dictionary
  """


  #create a dataframe of all of centerfield distances.
  center = pd.DataFrame()
  centerx = DROPPEDOUTFIELDPLAYS[f'{key}'].get('centerx')
  centery = DROPPEDOUTFIELDPLAYS[f'{key}'].get('centery')
  centerT = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Centerstime')
  center['x'] = centerx
  center['y'] = centery
  center['T'] = centerT
  center['x_diff'] = center['x'].diff()
  center['y_diff'] = center['y'].diff()
  center.loc[0,'x_diff'] = 0
  center.loc[0,'y_diff'] = 0
  center['T_diff'] = center['T'].diff()
  center.loc[0,'T_diff'] = 0
  center['stepwise_dist'] = np.sqrt(center['x_diff']**2. + center['y_diff']**2.)
  TotalDistance = np.sum(center['stepwise_dist'])
  TotalTime = np.sum(center['T_diff'])
  # print(DROPPEDOUTFIELDPLAYS)

  #add to dictionary
  DROPPEDOUTFIELDPLAYS[f'{key}']['Center x_diffs']= center['x_diff'].tolist()
  DROPPEDOUTFIELDPLAYS[f'{key}']['Center y_diffs']= center['y_diff'].tolist()
  DROPPEDOUTFIELDPLAYS[f'{key}']['Center T_diffs']= center['T_diff'].tolist()
  DROPPEDOUTFIELDPLAYS[f'{key}']['Center Stepwise']= center['stepwise_dist'].tolist()



  right = pd.DataFrame()
  rightx = DROPPEDOUTFIELDPLAYS[f'{key}'].get('rightfieldx')
  righty = DROPPEDOUTFIELDPLAYS[f'{key}'].get('rightfieldy')
  rightT = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Righttime')
  right['x'] = rightx
  right['y'] = righty
  right['T'] = rightT
  right['x_diff'] = right['x'].diff()
  right['y_diff'] = right['y'].diff()
  right.loc[0,'x_diff'] = 0
  right.loc[0,'Y_diff'] = 0
  right['T_diff'] = right['T'].diff()
  right.loc[0,'T_diff'] = 0
  right['stepwise_dist'] = np.sqrt(right['x_diff']**2. + right['y_diff']**2.)
  TotalDistance = np.sum(right['stepwise_dist'])
  TotalTime = np.sum(right['T_diff'])

  DROPPEDOUTFIELDPLAYS[f'{key}']['Right x_diffs']= right['x_diff'].tolist()
  DROPPEDOUTFIELDPLAYS[f'{key}']['Right y_diffs']= right['y_diff'].tolist()
  DROPPEDOUTFIELDPLAYS[f'{key}']['Right T_diffs']= right['T_diff'].tolist()
  DROPPEDOUTFIELDPLAYS[f'{key}']['Right Stepwise']= right['stepwise_dist'].tolist()

  left = pd.DataFrame()
  leftx = DROPPEDOUTFIELDPLAYS[f'{key}'].get('leftfieldx')
  lefty = DROPPEDOUTFIELDPLAYS[f'{key}'].get('leftfieldy')
  leftT = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Lefttime')
  left['x'] = leftx
  left['y'] = lefty
  left['T'] = leftT
  left['x_diff'] = left['x'].diff()
  left['y_diff'] = left['y'].diff()
  left.loc[0,'x_diff'] = 0
  left.loc[0,'y_diff'] = 0
  left['T_diff'] = left['T'].diff()
  left.loc[0,'T_diff'] = 0
  left['stepwise_dist'] = np.sqrt(left['x_diff']**2. + left['y_diff']**2.)
  TotalDistance = np.sum(left['stepwise_dist'])
  TotalTime = np.sum(left['T_diff'])

  DROPPEDOUTFIELDPLAYS[f'{key}']['Left x_diffs']= left['x_diff'].tolist()
  DROPPEDOUTFIELDPLAYS[f'{key}']['Left y_diffs']= left['y_diff'].tolist()
  DROPPEDOUTFIELDPLAYS[f'{key}']['Left T_diffs']= left['T_diff'].tolist()
  DROPPEDOUTFIELDPLAYS[f'{key}']['Left Stepwise']= left['stepwise_dist'].tolist()

  ball = pd.DataFrame()
  ballx = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Ballx')
  bally = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Bally')
  ballz = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Ballz')
  ballT = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Balltime')
  ball['x'] = ballx
  ball['y'] = bally
  ball['z'] = ballz
  ball['T'] = ballT
  ball['x_diff'] = ball['x'].diff()
  ball['y_diff'] = ball['y'].diff()
  ball['z_diff'] = ball['z'].diff()
  ball.loc[0,'x_diff'] = 0
  ball.loc[0,'y_diff'] = 0
  ball.loc[0,'z_diff'] = 0
  ball['T_diff'] = ball['T'].diff()
  ball.loc[0,'T_diff'] = 0
  ball['stepwise_dist'] = np.sqrt(ball['x_diff']**2. + ball['y_diff']**2. + ball['z_diff']**2. )
  TotalDistance = np.sum(ball['stepwise_dist'])
  TotalTime = np.sum(ball['T_diff'])

  DROPPEDOUTFIELDPLAYS[f'{key}']['Ball x_diffs']= ball['x_diff'].tolist()
  DROPPEDOUTFIELDPLAYS[f'{key}']['Ball y_diffs']= ball['y_diff'].tolist()
  DROPPEDOUTFIELDPLAYS[f'{key}']['Ball z_diffs']= ball['z_diff'].tolist()
  DROPPEDOUTFIELDPLAYS[f'{key}']['Ball T_diffs']= ball['T_diff'].tolist()
  DROPPEDOUTFIELDPLAYS[f'{key}']['Ball Stepwise']= ball['stepwise_dist'].tolist()

  return DROPPEDOUTFIELDPLAYS

data = pd.DataFrame(columns = ['Timestamp','Play_id', 'Play_per_game', 'event', 'Player'])
p = 0

##this for loop describes what happened during the plays in which outfielders were involved in ball aquistion.
for value in outfieldersplays:

  ##subset of the data corresponding to this play_id
  idval = value

  playpergame2 = outfielders[outfielders['play_id'] == idval]['play_per_game'].tolist()
  playpergame= playpergame2[0]

  event_codes = gameevents[gameevents['play_id'] == idval]

  #timestamp
  times = gameevents[gameevents['play_id'] == idval]
  timestamps = times["timestamp"]

  #creating the play_id and play_per game columns because they may differ
  playidnumber = len(event_codes['play_id'])
  play_idcolumn = [idval]*playidnumber
  play_pergamecolumn = [playpergame]*playidnumber

  #Extracting the event_codes that correspond to this
  event_codes = gameevents[gameevents['play_id'] == idval]
  event = event_codes["event_code"]

  #creating the player list
  playersinvolved = event_codes['player_position']

  #create dataframe
  playids = np.array(play_idcolumn)
  playpergame = np.array(play_pergamecolumn)

  event2 = np.array(event)
  playersinvolved2 = np.array(playersinvolved)
  timestamps2 = np.array(timestamps)

  #Add row to dataframe
  for n in play_idcolumn:
    new_row = pd.DataFrame({'Timestamp': timestamps2[p],'Play_id': playids[p]},
                            index=[0]).copy()
    new_row = pd.DataFrame({'Timestamp': timestamps2[p],
                            'Play_id': playids[p],
                            'Play_per_game': playpergame[p],
                            'event':event2[p],
                            'Player': playersinvolved2[p]},
                           index=[0]).copy()
    data = pd.concat([data,new_row])

    p = p +1

  p = 0



##Adding a column which describes the game in word form.
columnnew = eventstowords(data)
data["Words"] = columnnew

##Checking for missing gameinfo plays and dropping those values
data = data.reset_index()
rowstodrop = []
for index, row in data.iterrows():

  playnumber = row['Play_per_game']
  a = gameinfo[gameinfo['play_per_game'] == playnumber]
  a = len(a['play_per_game'].tolist())

  if a == 0:
    rowstodrop.append(index)

for n in rowstodrop:
  data = data.drop(n, axis = 0)


# Playmap = playeridnumber(data, gameinfo)

###This code block takes any play to the outfield (where the ball was hit) and determines if a fly-ball occured.
###The aquisition-position of the ball is recorded.

CFCatches = data.loc[(data['event'] == 2) & (data['Player'] == 8) & (data.event.shift(1) == 4)].copy()
CFallplays = data.loc[(data['Player'] == 8)].copy()

LeftCatch = data.loc[(data['event'] == 2) & (data['Player'] == 7) & (data.event.shift(1) == 4)].copy()
Leftallplays = data.loc[(data['Player'] == 7)].copy()

Rightcatch = data.loc[(data['event'] == 2) & (data['Player'] == 9) & (data.event.shift(1) == 4)].copy()
rightallplays = data.loc[(data['Player'] == 9)].copy()

onlyoutfielders = pd.concat([CFallplays,Leftallplays,rightallplays])

##only flyballs
alltooutfield = onlyoutfielders[onlyoutfielders['event'] == 2].copy()

#Next, find the player location (the player who caught the ball) when the ball is aquired.
fieldxposition = []
fieldyposition = []

for index, row in alltooutfield.iterrows():
  playid = row['Play_id']
  Playerposition = row['Player']
  time = row['Timestamp']
  positionxtable = player_pos[(player_pos['play_id']== playid) & (player_pos['player_position'] == Playerposition) & (player_pos['timestamp'] == time)]
  positionx = np.array(positionxtable['field_x'])
  positiony = np.array(positionxtable['field_y'])

  fieldyposition.append(positiony[0])
  fieldxposition.append(positionx[0])

alltooutfield['x_pos (aquired)'] = fieldxposition
alltooutfield['y_pos (aquired)'] = fieldyposition
# alltooutfield.head()

###Adding positions of the other outfielders when the ball was aquired.
###Includes all players, so users can see who caught the ball.

fieldxpositionleft = []
fieldypositionleft = []

fieldypositionright = []
fieldxpositionright = []

fieldxpositioncenter = []
fieldypositioncenter = []


for index, row in alltooutfield.iterrows():
  playid = row['Play_id']
  playpergame = row['Play_per_game']
  timestamp2 = row['Timestamp']

  row2 = player_pos[(player_pos['play_id'] == playid) & (player_pos['timestamp'] == timestamp2)].copy()
  centerfield = row2[row2['player_position'] == 8].copy()
  centerfieldx = centerfield['field_x'].item()
  centerfieldy = centerfield['field_y'].item()

  fieldxpositioncenter.append(centerfieldx)
  fieldypositioncenter.append(centerfieldy)

  rightfield = row2[row2['player_position'] == 9].copy()
  rightfieldx = rightfield['field_x'].item()
  rightfieldy = rightfield['field_y'].item()

  fieldxpositionright.append(rightfieldx)
  fieldypositionright.append(rightfieldy)


  leftfield = row2[row2['player_position'] == 7].copy()
  leftfieldx = leftfield['field_x'].item()
  leftfieldy = leftfield['field_y'].item()

  fieldxpositionleft.append(leftfieldx)
  fieldypositionleft.append(leftfieldy)

alltooutfield['x_pos (Center)'] = fieldxpositioncenter
alltooutfield['y_pos (Center)'] = fieldypositioncenter

alltooutfield['x_pos (Left)'] = fieldxpositionleft
alltooutfield['y_pos (Left)'] = fieldypositionleft

alltooutfield['x_pos (Right)'] = fieldxpositionright
alltooutfield['y_pos (Right)'] = fieldypositionright
# alltooutfield.head()

#Plot player loations when ball is aquired
##Plays in outfield == PIO

fig = plt.figure(figsize=(10, 8), dpi=80)

plt.title('Player and Ball Location (Time of Aquisition for All Flyball Outcomes)')
plt.xlabel('X Position')
plt.ylabel('Y Position')

plLPIO = plt.scatter(alltooutfield['x_pos (Left)'], alltooutfield['y_pos (Left)'], color='red')
plCPIO = plt.scatter(alltooutfield['x_pos (Center)'], alltooutfield['y_pos (Center)'], color='blue')
plRPIO = plt.scatter(alltooutfield['x_pos (Right)'], alltooutfield['y_pos (Right)'], color='green')
plCaughtPIO = plt.scatter(alltooutfield['x_pos (aquired)'], alltooutfield['y_pos (aquired)'], color='yellow', s = 13)


plt.legend([plLPIO, plRPIO,plCPIO,plCaughtPIO], ["Left Field", "Right Field", "Center Field", "Aquired"])
# plt.close(fig)
# plt.show()
# plt.savefig(f"PIO{game}.jpg")

"""##Hit Catch Outfield"""

##creating a dataframe in which only a flyball catch was made in the outfield
hitcatchoutfield = pd.concat([CFCatches,LeftCatch,Rightcatch])

rightfield = 9
leftfield = 7
centerfield = 8

#Aquisition position
fieldxposition = []
fieldyposition = []

#Finding Outfielder Location.
fieldxpositionleft = []
fieldypositionleft = []
fieldypositionright = []
fieldxpositionright = []
fieldxpositioncenter = []
fieldypositioncenter = []

##Add id values for other players, specific to this timestamp.
playerrightid = []
playerleftid = []
playercenter = []


for index, row in hitcatchoutfield.iterrows():
  playid = row['Play_id']
  Playerposition = row['Player']
  time = row['Timestamp']
  playpergame = row['Play_per_game']

  ##Ball position when caught
  positionxtable = player_pos[(player_pos['play_id']== playid) & (player_pos['player_position'] == Playerposition) & (player_pos['timestamp'] == time)]
  positionx = np.array(positionxtable['field_x'])
  positiony = np.array(positionxtable['field_y'])

  fieldyposition.append(positiony[0])
  fieldxposition.append(positionx[0])

  #position of the left fielder
  positionxtableleft = player_pos[(player_pos['play_id']== playid) & (player_pos['player_position'] == leftfield) & (player_pos['timestamp'] == time)].copy()

  positionxleft = np.array(positionxtableleft['field_x'])
  positionyleft = np.array(positionxtableleft['field_y'])

  fieldypositionleft.append(positionyleft[0])
  fieldxpositionleft.append(positionxleft[0])

  #position of right fielder
  positionxtableright = player_pos[(player_pos['play_id']== playid) & (player_pos['player_position'] == rightfield) & (player_pos['timestamp'] == time)].copy()
  positionxright = np.array(positionxtableright['field_x'])
  positionyright = np.array(positionxtableright['field_y'])

  fieldypositionright.append(positionyright[0])
  fieldxpositionright.append(positionxright[0])

  #position of the Center Fielder
  positionxtablecenter = player_pos[(player_pos['play_id']== playid) & (player_pos['player_position'] == centerfield) & (player_pos['timestamp'] == time)].copy()
  positionxcenter = np.array(positionxtablecenter['field_x'])
  positionycenter = np.array(positionxtablecenter['field_y'])

  fieldypositioncenter.append(positionycenter[0])
  fieldxpositioncenter.append(positionxcenter[0])

  ##player identity
  playerIdentitytable = gameinfo[(gameinfo['play_per_game'] == playpergame)].copy()

  playerIdentidyleft = playerIdentitytable['left_field'].values
  playerleftid.append(playerIdentidyleft[0])

  playerIdentidyright = playerIdentitytable['right_field'].values
  playerrightid.append(playerIdentidyright[0])

  playerIdentidycenter = playerIdentitytable['center_field'].values
  playercenter.append(playerIdentidycenter[0])



#add to data frame
hitcatchoutfield['x_pos (caught)'] = fieldxposition
hitcatchoutfield['y_pos (caught)'] = fieldyposition

hitcatchoutfield['x_pos (Left)'] = fieldxpositionleft
hitcatchoutfield['y_pos (Left)'] = fieldypositionleft
# onlyoutfielders['Left field']= playerleftid

hitcatchoutfield['x_pos (Right)'] = fieldxpositionright
hitcatchoutfield['y_pos (Right)'] = fieldypositionright
# onlyoutfielders['Right field']= playerrightid

hitcatchoutfield['x_pos (Center)'] = fieldxpositioncenter
hitcatchoutfield['y_pos (Center)'] = fieldypositioncenter
# onlyoutfielders['Center field']= playercenter

#add player ids
hitcatchoutfield['Left field']= playerleftid
hitcatchoutfield['Right field']= playerrightid
hitcatchoutfield['Center field']= playercenter

# hitcatchoutfield.head()

#plotting the fly-ball outcomes on a graph

##Plays in outfield split == PIOS
fig = plt.figure(figsize=(10, 8), dpi=80)

plt.title('Player and Ball Location (At Time of Aquisition)')
plt.xlabel('X Position')
plt.ylabel('Y Position')

plLPIOS = plt.scatter(alltooutfield['x_pos (Left)'], alltooutfield['y_pos (Left)'], color='red')
plCPIOS = plt.scatter(alltooutfield['x_pos (Center)'], alltooutfield['y_pos (Center)'], color='blue')
plRPIOS = plt.scatter(alltooutfield['x_pos (Right)'], alltooutfield['y_pos (Right)'], color='green')
plaquiredPIOS = plt.scatter(alltooutfield['x_pos (aquired)'], alltooutfield['y_pos (aquired)'], color='yellow', s = 13)
plCaughtPIOS = plt.scatter(hitcatchoutfield['x_pos (caught)'], hitcatchoutfield['y_pos (caught)'], color='pink', s = 13)
plt.legend([plLPIOS, plRPIOS,plCPIOS,plaquiredPIOS, plCaughtPIOS], ["Left Field", "Right Field", "Center Field", "Aquired", "Flyball Catch"])
plt.show()
# plt.savefig(f"PIOS{game}.jpg")

"""The following code can be expanded to filter through play ids to determine which plays might involve a back up. However, this was not used in our analysis."""

# # alltooutfielddictionary
# potentialbackupidscaught = []
# for index, row in hitcatchoutfield.iterrows():
#   # display(row)
#   aquiredplayer = row['Player']
#   yposition = row['y_pos (caught)']
#   xposition = row['x_pos (caught)']
#   playid = row['Play_id']
#   # print(playid)
#   # print(aquiredplayer)

#   righty = row['y_pos (Right)']
#   lefty = row['y_pos (Left)']
#   centery = row['y_pos (Center)']
#   rightx = row['x_pos (Right)']
#   leftx = row['x_pos (Left)']
#   centerx = row['x_pos (Center)']
#   # print(righty - yposition)
#   # print(aquiredplayer == 9)

#   if aquiredplayer == 8:
#     # print("got", aquiredplayer)
#     if righty - yposition  < 50:
#       # print("Right minus center")
#       # print(rightx - xposition)
#       if rightx - xposition < 20:
#         potentialbackupidscaught.append(playid)
#       else:
#         pass

#     elif lefty - yposition  < 50:
#       if leftx - xposition < 20:
#         # print(rightx - xposition)
#         potentialbackupidscaught.append(playid)
#       else:
#         pass

#   elif aquiredplayer == 9:
#       if centery - yposition < 50:
#         if centerx - xposition < 20:
#           # print(rightx - xposition)
#           potentialbackupidscaught.append(playid)
#         else:
#           pass
#   else:
#     if centery - yposition < 50:
#       if centerx - xposition < 20:
#         potentialbackupidscaught.append(playid)
#       else:
#         pass

def border(x,y, ax=None, **kw):
    if not ax: ax=plt.gca()
    p = np.c_[x,y]
    hull = ConvexHull(p)
    poly = plt.Polygon(p[hull.vertices,:], **kw)
    ax.add_patch(poly)

#This function is from the following stackoverflow post: https://stackoverflow.com/questions/44575681/how-do-i-encircle-different-data-sets-in-scatter-plot

#plotting where potential overlaps might occur in the outfield
##Overlap == OV
fig = plt.figure(figsize=(10, 10), dpi=80)

plt.title('Ball Location')
plt.xlabel('X Position')
plt.ylabel('Y Position')

plLOV = plt.scatter(alltooutfield['x_pos (Left)'], alltooutfield['y_pos (Left)'], color='red')
plCOV = plt.scatter(alltooutfield['x_pos (Center)'], alltooutfield['y_pos (Center)'], color='blue')
plROV = plt.scatter(alltooutfield['x_pos (Right)'], alltooutfield['y_pos (Right)'], color='green')
# plCaught = plt.scatter(data['x_pos (caught)'], data['y_pos (caught)'], color='pink')
border(alltooutfield['x_pos (Left)'],alltooutfield['y_pos (Left)'], ec = 'k', fc = 'red', alpha = .2)
border(alltooutfield['x_pos (Center)'],alltooutfield['y_pos (Center)'], ec = 'k', fc = 'blue', alpha = .2)
border(alltooutfield['x_pos (Right)'],alltooutfield['y_pos (Right)'], ec = 'k', fc = 'green', alpha = .2)

plt.legend([plLOV, plROV,plCOV], ["Left Field", "Right Field", "Center Field"])

plt.savefig(f'plot{csvgameinfo}.png')
plt.show()
# plt.savefig(f"LOV{game}.jpg")
# input()

##For every play in the hitcatch outfield table,
##information about how the players and ball move throughout the play
##is added to a dictionary

dictionarys ={}

for index, row in hitcatchoutfield.iterrows():

  playid = row['Play_id']
  playerpositions = player_pos[player_pos['play_id']== playid].copy()
  ballpositions = ballpos[ballpos['play_id']== playid].copy()

  centerfielderposition = playerpositions[playerpositions['player_position'] == 8].copy()
  rightfield = playerpositions[playerpositions['player_position'] == 9].copy()
  leftfield = playerpositions[playerpositions['player_position'] == 7].copy()

  centerfielderpositionx = np.array(centerfielderposition['field_x']).tolist()
  rightfieldx = np.array(rightfield['field_x']).tolist()
  leftfieldx = np.array(leftfield['field_x']).tolist()
  centery = np.array(centerfielderposition['field_y']).tolist()
  rightfieldy = np.array(rightfield['field_y']).tolist()
  leftfieldy = np.array(leftfield['field_y']).tolist()

  ballx = ballpositions['ball_position_x'].tolist()
  bally = ballpositions['ball_position_y'].tolist()
  ballz = ballpositions['ball_position_z'].tolist()

  dictionarys.update({f'{playid}': {'centerx': centerfielderpositionx}})
  dictionarys[f'{playid}']['rightfieldx']= rightfieldx
  dictionarys[f'{playid}']['leftfieldx']= leftfieldx
  dictionarys[f'{playid}']['rightfieldy']= rightfieldy
  dictionarys[f'{playid}']['leftfieldy']= leftfieldy
  dictionarys[f'{playid}']['centery']= centery
  dictionarys[f'{playid}']['Ballx']= ballx
  dictionarys[f'{playid}']['Bally']= bally
  dictionarys[f'{playid}']['Ballz']= ballz
  # input()

# dictionarys.keys()

###Right backed up Center == RC
###Left backed up Center == LC
###Center backed up Right == CR
###Center backed up Left == CL

##plotting each flight path == FLP
caughtbackupkeys = []
caughtplayerbackup = []

for key, value in dictionarys.items():
  # print(key)
  # print(value)
  centerx = dictionarys[f'{key}'].get('centerx')
  centery = dictionarys[f'{key}'].get('centery')
  rightx = dictionarys[f'{key}'].get('rightfieldx')
  righty = dictionarys[f'{key}'].get('rightfieldy')
  leftx = dictionarys[f'{key}'].get('leftfieldx')
  lefty = dictionarys[f'{key}'].get('leftfieldy')
  ballx = dictionarys[f'{key}'].get('Ballx')
  bally = dictionarys[f'{key}'].get('Bally')
  ballz = dictionarys[f'{key}'].get('Ballz')


  centerFLP = plt.plot(centerx, centery, color = 'red', label = f'center')
  rightFLP = plt.plot(rightx, righty, color = 'blue', label = f'right')
  leftFLP = plt.plot(leftx, lefty, color = 'green', label = f'left')
  ballFLP = plt.plot(ballx, bally, color = 'black', label = f'ball')
  plCaughtFLP = plt.scatter(hitcatchoutfield['x_pos (caught)'], hitcatchoutfield['y_pos (caught)'], color='cyan', s = 20)


  plt.xlabel("x position")
  plt.title("X vs Y Positions by Play")
  plt.ylabel("y position")
  plt.legend(bbox_to_anchor=(1.25, 1))

  ###If not examining each play, the following code block can be commented out.
  plt.show()
  print(f"Play number is {key}")
  print("Does this look like player's backed each other up?")
  response = input().upper()
  if 'YES' in response:
    print("who backed each other up (RC, CR,LC,CL)")
    who = input().upper()
    caughtbackupkeys.append(key)
    caughtplayerbackup.append(who)


# plt.legend()
# plt.ioff()
# plt.show()
# plt.savefig(f"FLP{game}.jpg")

##Add the timestamps into the dictionary
for key, value in dictionarys.items():
  keynum = int(key)

  timestampstable = player_pos[player_pos['play_id'] == keynum].copy()
  centertimetable = timestampstable[timestampstable['player_position'] == 8]
  centertime = centertimetable['timestamp'].tolist()

  righttimetable = timestampstable[timestampstable['player_position'] == 9]
  righttime = righttimetable['timestamp'].tolist()

  lefttimetable = timestampstable[timestampstable['player_position'] == 7]
  lefttime = lefttimetable['timestamp'].tolist()

  ballpositiontable = ballpos[ballpos['play_id'] == keynum].copy()
  balltime = ballpositiontable['timestamp'].tolist()

  timestamps = np.array(timestampstable['timestamp']).tolist()
  dictionarys[f'{keynum}']['Centerstime']= centertime
  dictionarys[f'{keynum}']['Righttime']= righttime
  dictionarys[f'{keynum}']['Lefttime']= lefttime
  dictionarys[f'{keynum}']['Balltime']= balltime

##Set up the stepwise distance during the play,
##This will be used in the next code block to calculate velocity

for key, value in dictionarys.items():

  #create a dataframe of all of the distances.
  center = pd.DataFrame()
  centerx = dictionarys[f'{key}'].get('centerx')
  centery = dictionarys[f'{key}'].get('centery')
  centerT = dictionarys[f'{key}'].get('Centerstime')
  center['x'] = centerx
  center['y'] = centery
  center['T'] = centerT
  centerx = center['x'].tolist()
  centery = center['y'].tolist()
  center['x_diff'] = centerx
  center['y_diff'] = centery

  center.loc[0,'x_diff'] = 0
  center.loc[0,'y_diff'] = 0
  center['T_diff'] = center['T'].diff()
  center.loc[0,'T_diff'] = 0
  center['stepwise_dist'] = np.sqrt(center['x_diff']**2. + center['y_diff']**2.)
  TotalDistance = np.sum(center['stepwise_dist'])
  TotalTime = np.sum(center['T_diff'])

  #add x diff to dictionary
  dictionarys[f'{key}']['Center x_diffs']= center['x_diff'].tolist()
  dictionarys[f'{key}']['Center y_diffs']= center['y_diff'].tolist()
  dictionarys[f'{key}']['Center T_diffs']= center['T_diff'].tolist()
  dictionarys[f'{key}']['Center Stepwise']= center['stepwise_dist'].tolist()

  #rightfield
  right = pd.DataFrame()
  rightx = dictionarys[f'{key}'].get('rightfieldx')
  righty = dictionarys[f'{key}'].get('rightfieldy')
  rightT = dictionarys[f'{key}'].get('Righttime')
  right['x'] = rightx
  right['y'] = righty
  right['T'] = rightT
  right['x_diff'] = right['x'].diff()
  right['y_diff'] = right['y'].diff()
  right.loc[0,'x_diff'] = 0
  right.loc[0,'y_diff'] = 0
  right['T_diff'] = right['T'].diff()
  right.loc[0,'T_diff'] = 0
  right['stepwise_dist'] = np.sqrt(right['x_diff']**2. + right['y_diff']**2.)
  TotalDistance = np.sum(right['stepwise_dist'])
  TotalTime = np.sum(right['T_diff'])

  dictionarys[f'{key}']['Right x_diffs']= right['x_diff'].tolist()
  dictionarys[f'{key}']['Right y_diffs']= right['y_diff'].tolist()
  dictionarys[f'{key}']['Right T_diffs']= right['T_diff'].tolist()
  dictionarys[f'{key}']['Right Stepwise']= right['stepwise_dist'].tolist()

  #Leftfield
  left = pd.DataFrame()
  leftx = dictionarys[f'{key}'].get('leftfieldx')
  lefty = dictionarys[f'{key}'].get('leftfieldy')
  leftT = dictionarys[f'{key}'].get('Lefttime')
  left['x'] = leftx
  left['y'] = lefty
  left['T'] = leftT
  left['x_diff'] = left['x'].diff()
  left['y_diff'] = left['y'].diff()
  left.loc[0,'x_diff'] = 0
  left.loc[0,'y_diff'] = 0
  left['T_diff'] = left['T'].diff()
  left.loc[0,'T_diff'] = 0
  left['stepwise_dist'] = np.sqrt(left['x_diff']**2. + left['y_diff']**2.)
  TotalDistance = np.sum(left['stepwise_dist'])
  TotalTime = np.sum(left['T_diff'])

  dictionarys[f'{key}']['Left x_diffs']= left['x_diff'].tolist()
  dictionarys[f'{key}']['Left y_diffs']= left['y_diff'].tolist()
  dictionarys[f'{key}']['Left T_diffs']= left['T_diff'].tolist()
  dictionarys[f'{key}']['Left Stepwise']= left['stepwise_dist'].tolist()

  #ball
  ball = pd.DataFrame()
  ballx = dictionarys[f'{key}'].get('Ballx')
  bally = dictionarys[f'{key}'].get('Bally')
  ballz = dictionarys[f'{key}'].get('Ballz')
  ballT = dictionarys[f'{key}'].get('Balltime')
  ball['x'] = ballx
  ball['y'] = bally
  ball['z'] = ballz
  ball['T'] = ballT
  ball['x_diff'] = ball['x'].diff()
  ball['y_diff'] = ball['y'].diff()
  ball['z_diff'] = ball['z'].diff()
  ball.loc[0,'x_diff'] = 0
  ball.loc[0,'y_diff'] = 0
  ball.loc[0,'z_diff'] = 0
  ball['T_diff'] = ball['T'].diff()
  ball.loc[0,'T_diff'] = 0
  ball['stepwise_dist'] = np.sqrt(ball['x_diff']**2. + ball['y_diff']**2. + ball['z_diff']**2.)
  TotalDistance = np.sum(ball['stepwise_dist'])
  TotalTime = np.sum(ball['T_diff'])

  dictionarys[f'{key}']['Ball x_diffs']= ball['x_diff'].tolist()
  dictionarys[f'{key}']['Ball y_diffs']= ball['y_diff'].tolist()
  dictionarys[f'{key}']['Ball z_diffs']= ball['z_diff'].tolist()
  dictionarys[f'{key}']['Ball T_diffs']= ball['T_diff'].tolist()
  dictionarys[f'{key}']['Ball Stepwise']= ball['stepwise_dist'].tolist()

##Calculate Velocity
for key, value in dictionarys.items():

  centerstepdist = dictionarys[f'{key}'].get('Center Stepwise')
  centertimestep = dictionarys[f'{key}'].get('Center T_diffs')
  centerT = dictionarys[f'{key}'].get('Centerstime')
  centervelocity = [i / j for i, j in zip(centerstepdist[1:], centertimestep[1:])]
  dictionarys[f'{key}']['Center velocity']= centervelocity

  rightstepdist = dictionarys[f'{key}'].get('Right Stepwise')
  righttimestep = dictionarys[f'{key}'].get('Right T_diffs')
  RightT = dictionarys[f'{key}'].get('Righttime')
  rightvelocity = [i / j for i, j in zip(rightstepdist[1:], righttimestep[1:])]
  dictionarys[f'{key}']['Right velocity']= rightvelocity

  leftstepdist = dictionarys[f'{key}'].get('Left Stepwise')
  lefttimestep = dictionarys[f'{key}'].get('Left T_diffs')
  LeftT = dictionarys[f'{key}'].get('Lefttime')
  leftvelocity = [i / j for i, j in zip(leftstepdist[1:], lefttimestep[1:])]
  dictionarys[f'{key}']['Left velocity']= leftvelocity

  ballstepdist = dictionarys[f'{key}'].get('Ball Stepwise')
  balltimestep = dictionarys[f'{key}'].get('Ball T_diffs')
  BallT = dictionarys[f'{key}'].get('Balltime')
  ballvelocity = [i / j for i, j in zip(ballstepdist[1:], balltimestep[1:])]
  dictionarys[f'{key}']['Ball velocity']= ballvelocity


##Calculating Velocity differences and calculating Acceleration.
  center = pd.DataFrame()
  centerV = dictionarys[f'{key}'].get('Center velocity')
  centerT = dictionarys[f'{key}'].get('Center T_diffs')[1:]
  center['V'] = centerV
  center['T'] = centerT
  center['V_diff'] = center['V'].diff()

  centerA = [i / j for i, j in zip(centerV, centerT)]
  dictionarys[f'{key}']['Center Acceleration']= centerA

  ##rightfield
  right = pd.DataFrame()
  rightV = dictionarys[f'{key}'].get('Right velocity')
  rightT = dictionarys[f'{key}'].get('Right T_diffs')[1:]
  right['V'] = rightV
  right['T'] = rightT
  right['V_diff'] = right['V'].diff()

  RightA = [i / j for i, j in zip(rightV, rightT)]
  dictionarys[f'{key}']['Right Acceleration']= RightA

  ###leftfield
  left = pd.DataFrame()
  leftV = dictionarys[f'{key}'].get('Left velocity')
  leftT = dictionarys[f'{key}'].get('Left T_diffs')[1:]
  left['V'] = leftV
  left['T'] = leftT
  left['V_diff'] = left['V'].diff()

  LeftA = [i / j for i, j in zip(leftV, leftT)]
  dictionarys[f'{key}']['Left Acceleration']= LeftA

  ####ball :)
  Ball = pd.DataFrame()
  BallV = dictionarys[f'{key}'].get('Ball velocity')
  BallT = dictionarys[f'{key}'].get('Ball T_diffs')[1:]
  Ball['V'] = BallV
  Ball['T'] = BallT
  Ball['V_diff'] = Ball['V'].diff()

  BallA = [i / j for i, j in zip(BallV, BallT)]
  dictionarys[f'{key}']['Ball Acceleration']= BallA

"""#Dropped Fly-Balls"""

##dataframe of all dropped fly-balls.
listofvals = hitcatchoutfield['Play_id'].unique().tolist()
a = 0
for n in listofvals:

  #taking all plays in which a hit catch did not occur
  alltooutfielddropped = alltooutfield.loc[alltooutfield['Play_id'] != listofvals[a]]
  a = a + 1

  #set equal to each other because the other play ids in the list of vals are still in the alltooutfielddropped dataframe
  alltooutfield = alltooutfielddropped

"""###A for-loop which could be used to filter data, but was not used in the analysis"""

#Another way to filter the data if users wish to do so.
# #alltooutfielddictionary
# potentialbackupidsdropped = []
# for index, row in alltooutfielddropped.iterrows():
#   aquiredplayer = row['Player']
#   yposition = row['y_pos (aquired)']
#   xposition = row['x_pos (aquired)']
#   playid = row['Play_id']

#   righty = row['y_pos (Right)']
#   lefty = row['y_pos (Left)']
#   centery = row['y_pos (Center)']
#   rightx = row['x_pos (Right)']
#   leftx = row['x_pos (Left)']
#   centerx = row['x_pos (Center)']

#   if aquiredplayer == 8:
#     # print("got", aquiredplayer)
#     if righty - yposition  < 50:
#       # print("Right minus center")
#       # print(rightx - xposition)
#       if rightx - xposition < 20:
#         potentialbackupidsdropped.append(playid)
#       else:
#         pass

#     elif lefty - yposition  < 50:
#       if leftx - xposition < 20:
#         # print(rightx - xposition)
#         potentialbackupidsdropped.append(playid)
#       else:
#         pass

#   elif aquiredplayer == 9:
#       if centery - yposition < 50:
#         if centerx - xposition < 20:
#           # print(rightx - xposition)
#           potentialbackupidsdropped.append(playid)
#         else:
#           pass
#   else:
#     if centery - yposition < 50:
#       if centerx - xposition < 20:
#         potentialbackupidsdropped.append(playid)
#       else:
#         pass

##Sometimes the filter resulted in different values in the following variables, thus it was not used.
# alltooutfielddropped.sort_values("Play_id")
# potentialbackupidsdropped

"""##Dropped Plays Dictionary."""

###Extract player positions and add to a dictionary
listAA = []
DROPPEDOUTFIELDPLAYS = {}
for index, row in alltooutfielddropped.iterrows():

  playid = row['Play_id']
  playerpositions = player_pos[player_pos['play_id']== playid].copy()
  ballpositions = ballpos[ballpos['play_id']== playid].copy()

  centerfielderposition = playerpositions[playerpositions['player_position'] == 8].copy()
  rightfield = playerpositions[playerpositions['player_position'] == 9].copy()
  leftfield = playerpositions[playerpositions['player_position'] == 7].copy()

  centerfielderpositionx = np.array(centerfielderposition['field_x']).tolist()
  rightfieldx = np.array(rightfield['field_x']).tolist()
  leftfieldx = np.array(leftfield['field_x']).tolist()
  centery = np.array(centerfielderposition['field_y']).tolist()
  rightfieldy = np.array(rightfield['field_y']).tolist()
  leftfieldy = np.array(leftfield['field_y']).tolist()

  ##Ball postion now
  ballx = ballpositions['ball_position_x'].tolist()
  bally = ballpositions['ball_position_y'].tolist()
  ballz = ballpositions['ball_position_z'].tolist()

  DROPPEDOUTFIELDPLAYS.update({f'{playid}': {'centerx': centerfielderpositionx}})
  DROPPEDOUTFIELDPLAYS[f'{playid}']['rightfieldx']= rightfieldx
  DROPPEDOUTFIELDPLAYS[f'{playid}']['leftfieldx']= leftfieldx
  DROPPEDOUTFIELDPLAYS[f'{playid}']['rightfieldy']= rightfieldy
  DROPPEDOUTFIELDPLAYS[f'{playid}']['leftfieldy']= leftfieldy
  DROPPEDOUTFIELDPLAYS[f'{playid}']['centery']= centery
  DROPPEDOUTFIELDPLAYS[f'{playid}']['Ballx']= ballx
  DROPPEDOUTFIELDPLAYS[f'{playid}']['Bally']= bally
  DROPPEDOUTFIELDPLAYS[f'{playid}']['Ballz']= ballz

#PLotting each play and prompting user if this is a backup play

#DROPPED PLAYS = DRO
droppedplayerbackup = []
droppedbackupkeys = []
for key, value in DROPPEDOUTFIELDPLAYS.items():
  # print(key)
  # print(value)
  centerx = DROPPEDOUTFIELDPLAYS[f'{key}'].get('centerx')
  centery = DROPPEDOUTFIELDPLAYS[f'{key}'].get('centery')
  rightx = DROPPEDOUTFIELDPLAYS[f'{key}'].get('rightfieldx')
  righty = DROPPEDOUTFIELDPLAYS[f'{key}'].get('rightfieldy')
  leftx = DROPPEDOUTFIELDPLAYS[f'{key}'].get('leftfieldx')
  lefty = DROPPEDOUTFIELDPLAYS[f'{key}'].get('leftfieldy')
  ballx = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Ballx')
  bally = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Bally')
  ballz = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Ballz')

  centerDRO = plt.plot(centerx, centery, color = 'red', label = f'{key}')
  rightDRO = plt.plot(rightx, righty, color = 'blue', label = f'{key}')
  leftDRO = plt.plot(leftx, lefty, color = 'green', label = f'{key}')
  ballDRO = plt.plot(ballx, bally, color = 'black', label = f'{key}')
  plCaughtDRO = plt.scatter(alltooutfielddropped['x_pos (aquired)'],
                         alltooutfielddropped['y_pos (aquired)'], color='cyan', s = 20)

  plt.show()
  print("Does this look like player's backed each other up?")
  response = input().upper()
  if 'YES' in response:
    print("who backed each other up (RC, CR,LC,CL)")
    who = input().upper()
    droppedbackupkeys.append(key)
    droppedplayerbackup.append(who)
  # input()
  right = plt.plot(centerx, centery, color='red')
# plt.legend()
plt.xlabel("x position")
plt.title("X vs Y")
plt.ylabel("y position")
# plt.show()
plt.ioff()
# plt.savefig(f"DRO{game}.jpg")

##See which plays were added and who backed up whom
# droppedbackupkeys
# droppedplayerbackup

#Extracting time data for each --> This was added later in the analysis and was not included in the analysis.

for key, value in DROPPEDOUTFIELDPLAYS.items():
  keynum = int(key)
  # print(value)
  timestampstable = player_pos[player_pos['play_id'] == keynum].copy()
  centertimetable = timestampstable[timestampstable['player_position'] == 8].copy()
  centertime = centertimetable['timestamp'].tolist()

  righttimetable = timestampstable[timestampstable['player_position'] == 9].copy()
  righttime = righttimetable['timestamp'].tolist()

  lefttimetable = timestampstable[timestampstable['player_position'] == 7].copy()
  lefttime = lefttimetable['timestamp'].tolist()

  ballpositiontable = ballpos[ballpos['play_id'] == keynum].copy()
  balltime = ballpositiontable['timestamp'].tolist()
  timestamps = np.array(timestampstable['timestamp']).tolist()
  DROPPEDOUTFIELDPLAYS[f'{keynum}']['Centerstime']= centertime
  DROPPEDOUTFIELDPLAYS[f'{keynum}']['Righttime']= righttime
  DROPPEDOUTFIELDPLAYS[f'{keynum}']['Lefttime']= lefttime
  DROPPEDOUTFIELDPLAYS[f'{keynum}']['Balltime']= balltime

  DROPPEDOUTFIELDPLAYS = diffs(key, DROPPEDOUTFIELDPLAYS)

#Calculate velocity and acceleration
for key, value in DROPPEDOUTFIELDPLAYS.items():

  centerstepdist = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Center Stepwise')
  centertimestep = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Center T_diffs')
  centerT = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Centerstime')
  centervelocity = [i / j for i, j in zip(centerstepdist[1:], centertimestep[1:])]
  DROPPEDOUTFIELDPLAYS[f'{key}']['Center velocity']= centervelocity

  rightstepdist = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Right Stepwise')
  righttimestep = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Right T_diffs')
  RightT = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Righttime')
  rightvelocity = [i / j for i, j in zip(rightstepdist[1:], righttimestep[1:])]
  DROPPEDOUTFIELDPLAYS[f'{key}']['Right velocity']= rightvelocity

  leftstepdist = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Left Stepwise')
  lefttimestep = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Left T_diffs')
  LeftT = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Lefttime')
  leftvelocity = [i / j for i, j in zip(leftstepdist[1:], lefttimestep[1:])]
  DROPPEDOUTFIELDPLAYS[f'{key}']['Left velocity']= leftvelocity

  ballstepdist = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Ball Stepwise')
  balltimestep = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Ball T_diffs')
  BallT = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Balltime')
  ballvelocity = [i / j for i, j in zip(ballstepdist[1:], balltimestep[1:])]
  DROPPEDOUTFIELDPLAYS[f'{key}']['Ball velocity']= ballvelocity

  ##Velocity Differences
  #create a dataframe of all of the distances.
  center = pd.DataFrame()
  centerV = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Center velocity')
  centerT = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Center T_diffs')[1:]
  center['V'] = centerV
  center['T'] = centerT
  center['V_diff'] = center['V'].diff()
  centerA = [i / j for i, j in zip(centerV, centerT)]
  DROPPEDOUTFIELDPLAYS[f'{key}']['Center Acceleration']= centerA

  ##rightfield
  right = pd.DataFrame()
  rightV = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Right velocity')
  rightT = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Right T_diffs')[1:]
  right['V'] = rightV
  right['T'] = rightT
  right['V_diff'] = right['V'].diff()
  RightA = [i / j for i, j in zip(rightV, rightT)]
  DROPPEDOUTFIELDPLAYS[f'{key}']['Right Acceleration']= RightA

  ###leftfield
  left = pd.DataFrame()
  leftV = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Left velocity')
  leftT = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Left T_diffs')[1:]
  left['V'] = leftV
  left['T'] = leftT
  left['V_diff'] = left['V'].diff()
  LeftA = [i / j for i, j in zip(leftV, leftT)]
  DROPPEDOUTFIELDPLAYS[f'{key}']['Left Acceleration']= LeftA

  ####ball
  Ball = pd.DataFrame()
  BallV = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Ball velocity')
  BallT = DROPPEDOUTFIELDPLAYS[f'{key}'].get('Ball T_diffs')[1:]
  Ball['V'] = BallV
  Ball['T'] = BallT
  Ball['V_diff'] = Ball['V'].diff()
  BallA = [i / j for i, j in zip(BallV, BallT)]
  DROPPEDOUTFIELDPLAYS[f'{key}']['Ball Acceleration']= BallA

"""##Comparing the Hit-Catch with Dropped fly-balls"""

#CCV = Center (fly-ball is caught) Velocity

#caught plays
CCV = []
CCA = []
RCV = []
RCA = []
LCV = []
LCA = []
BCV = []
BCA = []


for key, value in dictionarys.items():
  CCV.extend(dictionarys[f'{key}'].get('Center velocity'))
  CCA.extend(dictionarys[f'{key}'].get('Center Acceleration'))
  RCV.extend(dictionarys[f'{key}'].get('Right velocity'))
  RCA.extend(dictionarys[f'{key}'].get('Right Acceleration'))
  LCV.extend(dictionarys[f'{key}'].get('Left velocity'))
  LCA.extend(dictionarys[f'{key}'].get('Left Acceleration'))
  BCV.extend(dictionarys[f'{key}'].get('Ball velocity'))
  BCA.extend(dictionarys[f'{key}'].get('Ball Acceleration'))

#non-caught plays
CV = []
CA = []
RV = []
RA = []
LV = []
LA = []
BV = []
BA = []

for key, value in DROPPEDOUTFIELDPLAYS.items():
  #non-caught plays
  CV.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('Center velocity'))
  CA.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('Center Acceleration'))
  RV.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('Right velocity'))
  RA.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('Right Acceleration'))
  LV.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('Left velocity'))
  LA.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('Left Acceleration'))
  BV.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('Ball velocity'))
  BA.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('Ball Acceleration'))

"""##Distance between center and rightfield at ball aquisition
The following code looks at the distance between centerfield and rightfield when the ball was caught.
"""

#Data related to right or center field.
droppedrightorcenter = alltooutfielddropped[(alltooutfielddropped['Player'] == 8 ) | (alltooutfielddropped['Player'] == 9 )]
caughtrightorcenter = hitcatchoutfield[(hitcatchoutfield['Player'] == 8 ) | (hitcatchoutfield['Player'] == 9 )]

"""Caught Fly-balls"""

##Calculate Distance between Center and Rightfield.
caughtrightorcenter = caughtrightorcenter.copy()
distancecenterright = []
for index, row in caughtrightorcenter.iterrows():
  playid = row['Play_id']
  forthisplay = caughtrightorcenter[caughtrightorcenter['Play_id'] == playid ].copy()
  forthisplay['x_pos (Left)'].values[0]
  # left = [forthisplay['x_pos (Left)'].values[0],forthisplay['y_pos (Left)'].values[0]]
  center = [forthisplay['x_pos (Center)'].values[0],forthisplay['y_pos (Center)'].values[0]]
  right = [forthisplay['x_pos (Right)'].values[0],forthisplay['y_pos (Right)'].values[0]]
  caught = [forthisplay['x_pos (caught)'].values[0],forthisplay['y_pos (caught)'].values[0]]

  #take the distance
  distance = math.dist(center,right)
  distancecenterright.append(distance)

caughtrightorcenter['Center and Right Distance'] = distancecenterright

"""Dropped Fly Balls"""

##Now examine the distance between right and center when the ball is dropped.
droppedrightorcenter = droppedrightorcenter.copy()
distancecenterright = []
for index, row in droppedrightorcenter.iterrows():
  playid = row['Play_id']

  forthisplay = droppedrightorcenter[droppedrightorcenter['Play_id'] == playid ].copy()
  forthisplay['x_pos (Left)'].values[0]
  # left = [forthisplay['x_pos (Left)'].values[0],forthisplay['y_pos (Left)'].values[0]]
  center = [forthisplay['x_pos (Center)'].values[0],forthisplay['y_pos (Center)'].values[0]]
  right = [forthisplay['x_pos (Right)'].values[0],forthisplay['y_pos (Right)'].values[0]]
  caught = [forthisplay['x_pos (aquired)'].values[0],forthisplay['y_pos (aquired)'].values[0]]

  distance = math.dist(center,right)
  distancecenterright.append(distance)

droppedrightorcenter['Center and Right Distance'] = distancecenterright

##This is recorded in a dataframe using another script
dropped = droppedrightorcenter['Center and Right Distance'].tolist()
caught = caughtrightorcenter['Center and Right Distance'].tolist()
stats.ttest_ind(a=dropped, b=caught, equal_var=True)

"""#Creating dataframes of all data extracted for backup plays

##Caught
"""

#caught backup plays
BCCV = []
BCCA = []
BCCPX = []
BCCPY = []
BRCV = []
BRCA = []
BRCPX = []
BRCPY = []
BLCV = []
BLCA = []
BLCPX = []
BLCPY = []
BBCV = []
BBCA = []
BBCP = []

CBalltime = []
CCentertime = []
CRighttime = []
CLefttime = []

for key, value in dictionarys.items():
  if key not in caughtbackupkeys:
    pass
  else:
    BCCV.extend(dictionarys[f'{key}'].get('Center velocity'))
    BCCA.extend(dictionarys[f'{key}'].get('Center Acceleration'))
    BCCPX.extend(dictionarys[f'{key}'].get('centerx'))
    BCCPY.extend(dictionarys[f'{key}'].get('centery'))

    BRCV.extend(dictionarys[f'{key}'].get('Right velocity'))
    BRCA.extend(dictionarys[f'{key}'].get('Right Acceleration'))
    BRCPX.extend(dictionarys[f'{key}'].get('rightfieldx'))
    BRCPY.extend(dictionarys[f'{key}'].get('rightfieldy'))

    BLCV.extend(dictionarys[f'{key}'].get('Left velocity'))
    BLCA.extend(dictionarys[f'{key}'].get('Left Acceleration'))
    BLCPX.extend(dictionarys[f'{key}'].get('leftfieldx'))
    BLCPY.extend(dictionarys[f'{key}'].get('leftfieldy'))

    BBCV.extend(dictionarys[f'{key}'].get('Ball velocity'))
    BBCA.extend(dictionarys[f'{key}'].get('Ball Acceleration'))
    BBCP.extend((dictionarys[f'{key}'].get('Ball Acceleration')))

    CBalltime.extend(dictionarys[f'{key}'].get('Balltime'))
    CCentertime.extend(dictionarys[f'{key}'].get('Centerstime'))
    CRighttime.extend(dictionarys[f'{key}'].get('Righttime'))
    CLefttime.extend(dictionarys[f'{key}'].get('Lefttime'))

caughtbackup = pd.DataFrame()
caughtbackup['leftfieldx'] = pd.Series(BLCPX, dtype = 'float64')
caughtbackup['leftfieldyy'] = pd.Series(BLCPY, dtype = 'float64')
caughtbackup['rightfieldx'] = pd.Series(BRCPX, dtype = 'float64')
caughtbackup['rightfieldy'] = pd.Series(BRCPY, dtype = 'float64')
caughtbackup['centerx'] = pd.Series(BCCPX, dtype = 'float64')
caughtbackup['centery'] = pd.Series(BCCPY, dtype = 'float64')
caughtbackup['centerV'] = pd.Series(BCCV, dtype = 'float64')
caughtbackup['centerA'] = pd.Series(BCCA, dtype = 'float64')
caughtbackup['RightV'] = pd.Series(BRCV, dtype = 'float64')
caughtbackup['RightA'] = pd.Series(BRCA, dtype = 'float64')
caughtbackup['LeftV'] = pd.Series(BLCV, dtype = 'float64')
caughtbackup['LeftA'] = pd.Series(BLCA, dtype = 'float64')
caughtbackup['BallV'] = pd.Series(BBCV, dtype = 'float64')
caughtbackup['BallA'] = pd.Series(BBCA, dtype = 'float64')
caughtbackup['Right time'] = pd.Series(CRighttime, dtype = 'float64')
caughtbackup['Left time'] = pd.Series(CLefttime, dtype = 'float64')
caughtbackup['Center time'] = pd.Series(CCentertime, dtype = 'float64')
caughtbackup['Ball time'] = pd.Series(CBalltime, dtype = 'float64')

caughtbackup['Players who Backed up'] = pd.Series(caughtplayerbackup, dtype = 'string')
caughtbackup['Keys']= pd.Series(caughtbackupkeys, dtype = 'float64')
# caughtbackup['BallP'] = pd.Series(BBCP)

"""##Dropped"""

#Dropped BACKUP plays
backupBCV = []
backupBCA = []
BCPX = []
BCPY = []
BRV = []
BRA = []
BRPX = []
BRPY = []
BLV = []
BLA = []
BLPX = []
BLPY =[]
BBV = []
BBA = []
BBP = []
DBalltime = []
DCentertime = []
DRighttime = []
DLefttime = []

for key, value in DROPPEDOUTFIELDPLAYS.items():
  if key not in droppedbackupkeys:
    pass
  else:
    backupBCV.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('Center velocity'))
    backupBCA.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('Center Acceleration'))
    BCPX.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('centerx'))
    BCPY.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('centery'))

    BRV.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('Right velocity'))
    BRA.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('Right Acceleration'))
    BRPX.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('rightfieldx'))
    BRPY.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('rightfieldy'))

    BLV.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('Left velocity'))
    BLA.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('Left Acceleration'))
    BLPX.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('leftfieldx'))
    BLPY.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('leftfieldy'))

    BBV.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('Ball velocity'))
    BBA.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('Ball Acceleration'))

    DBalltime.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('Balltime'))
    DCentertime.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('Centerstime'))
    DRighttime.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('Righttime'))
    DLefttime.extend(DROPPEDOUTFIELDPLAYS[f'{key}'].get('Lefttime'))

droppedbackup = pd.DataFrame()
droppedbackup['leftfieldx'] = pd.Series(BLPX, dtype = 'float64')
droppedbackup['leftfieldyy'] = pd.Series(BLPY, dtype = 'float64')
droppedbackup['rightfieldx'] = pd.Series(BRPX, dtype = 'float64')
droppedbackup['rightfieldy'] = pd.Series(BRPY, dtype = 'float64')
droppedbackup['centerx'] = pd.Series(BCPX, dtype = 'float64')
droppedbackup['centery'] = pd.Series(BCPY, dtype = 'float64')

droppedbackup['centerV'] = pd.Series(backupBCV, dtype = 'float64')
droppedbackup['centerA'] = pd.Series(backupBCA, dtype = 'float64')
droppedbackup['RightV'] = pd.Series(BRV, dtype = 'float64')
droppedbackup['RightA'] = pd.Series(BRA, dtype = 'float64')
droppedbackup['LeftV'] = pd.Series(BLV, dtype = 'float64')
droppedbackup['LeftA'] = pd.Series(BLA, dtype = 'float64')
droppedbackup['BallV'] = pd.Series(BBV, dtype = 'float64')
droppedbackup['BallA'] = pd.Series(BBA, dtype = 'float64')

droppedbackup['Right time'] = pd.Series(DRighttime, dtype = 'float64')
droppedbackup['Left time'] = pd.Series(DLefttime, dtype = 'float64')
droppedbackup['Center time'] = pd.Series(DCentertime, dtype = 'float64')
droppedbackup['Ball time'] = pd.Series(DBalltime, dtype = 'float64')

droppedbackup['Players who Backed up'] = pd.Series(droppedplayerbackup, dtype = 'string')
droppedbackup['Keys']= pd.Series(droppedbackupkeys, dtype = 'float64')
# droppedbackup['BallP'] = pd.Series(BBP)

"""#Export to CSV Files"""

#export to csv
caughtbackup.to_csv(f'{game} Backup Caught.csv')
droppedbackup.to_csv(f'{game} Backup Dropped.csv')