# -*- coding: utf-8 -*-
"""Backup Statistical Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19gFeM_1NKBTp-67gzTymSxzVsAbB9DbM
"""

# @title
#mounting google drive
from google.colab import drive
drive.mount('/content/drive')
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
from matplotlib.pyplot import figure
import ipywidgets as widgets
from IPython.display import display
import seaborn as sns
import scipy.stats as stats
import math
import statistics
from sklearn.preprocessing import normalize
from sklearn import preprocessing
from pandas import read_csv
from pandas import DataFrame
from pandas.plotting import scatter_matrix
from sklearn.preprocessing import MinMaxScaler
from matplotlib import pyplot
import itertools
from statistics import mean

def smoothing(vectors):
  """
  Computes Fast Fourier Transform and shows plots which allow the users to determine a cutoff freq.

  Inputs:
  - vectors (list): Data.

  Returns:
  - No variable is returned, only a visualization for the user.
  """

  # Create time data:
  dt = 0.02    #chosen time step
  time = range(0, len(vectors))

  # Compute Fast Fourier Transform
  n = len(vectors)
  ax_hat = np.fft.fft(vectors,n)
  PSD = np.sqrt(ax_hat * np.conj(ax_hat) / n)
  freq = (1/(dt*n)) * np.arange(n)
  L = np.arange(1,np.floor(n/2),dtype='int')

  fig, ax = plt.subplots(1, 2, figsize=(20,3))

  plt.sca(ax[0])
  plt.plot(time, vectors, '-', label='Noisy')
  plt.title('Signal in Time Domain')
  plt.ylabel(r'Variable' )
  plt.xlabel('Time [s]')
  plt.legend()
  plt.grid()

  plt.sca(ax[1])
  plt.plot(freq[L], PSD[L], '-', label='Noisy')
  plt.title('Power Spectrum')
  plt.xlabel('Frequencies [Hz]')
  plt.ylabel('Power')
  plt.xlim(0, 6)
  plt.legend()
  plt.grid()
  plt.show()

def smoothing2(am_cutoff, vectors):
  """
  Computes Fast Fourier Transform and applies the chosen cutoff freq.

  Inputs:
  - am_cutoff (int.): Frequency cutoff value.
  - vectors: data requiring filtering.

  Returns:
  - ax_filt (list): filtered data
  """

  dt = 0.02
  time = range(0, len(vectors))

  #Fast Fourier Transform
  n = len(vectors)
  ax_hat = np.fft.fft(vectors,n)
  PSD = np.sqrt(ax_hat * np.conj(ax_hat) / n)
  freq = (1/(dt*n)) * np.arange(n)
  L = np.arange(1,np.floor(n/2),dtype='int')

  # Power Spectrum Density to filter data
  indices = PSD >  amp_cutoff
  PSDclean = PSD * indices
  ax_hat = indices * ax_hat

  ax_filt = np.fft.ifft(ax_hat)

  fig, ax = plt.subplots(1,2, figsize=(20,3))

  plt.sca(ax[0])
  plt.plot(time, ax_filt, '-', label='Filtered')
  plt.ylabel(r'Acceleration $[\mathrm{m}/\mathrm{s}^2]$' )
  plt.xlabel('Time [s]')
  plt.legend()
  plt.grid()

  plt.sca(ax[1])
  plt.plot(freq[L], PSD[L], '-', label='Noisy')
  plt.plot(freq[L], PSDclean[L], '-', label='Filtered')
  plt.xlabel('Frequencies [Hz]')
  plt.ylabel('Power')
  plt.legend()
  plt.grid()

  plt.savefig(f"{am_cutoff}.jpg")

  plt.show()

  return ax_filt

def normalization(importedlist):
  """
  Normalizes data based on whether or not the minimum is a positive or negative number.

  Inputs:
  - importedlist (list): Data.

  Returns:
  - normalizedd (list): normalized version of input data.
  """
  s = importedlist
  print(min(s))

  if min(s) < 0:
    print("Negative")
    normalizedd = (importedlist-importedlist.min()) / ( importedlist.max()-importedlist.min())*2 -1

  else:
    print("Positive")
    normalizedd = (importedlist-importedlist.min()) / ( importedlist.max()-importedlist.min())

  return normalizedd

def distances(listinputsss):
  """
  Calculates distance from the median for input data.

  Inputs:
  - listinputsss (list): Data.

  Returns:
  - distances (list): List of distances from the mean for each point in input data.
  """

  df = pd.DataFrame()
  new = [n.real for n in listinputsss]
  df['new'] = new
  df['median'] = statistics.median(new)
  print("Median", statistics.median(new))
  df['distances'] = df['new'] - df['median']
  distances = df['distances'].tolist()
  return distances

"""###List of all game files used"""

# @title
gamelistA31903 = ['-1903_27_TeamNH_TeamA3.csv','-1903_26_TeamNH_TeamA3.csv','-1903_25_TeamNH_TeamA3.csv',
                  '-1903_18_TeamNI_TeamA3.csv','-1903_17_TeamNI_TeamA3.csv','-1903_16_TeamNI_TeamA3.csv',
                  '-1903_15_TeamNG_TeamA3.csv',
                  # '-1903_14_TeamNG_TeamA3.csv' this one has issues with the Right acceleration column being missing.
                  '-1903_13_TeamNG_TeamA3.csv']

gamelistA31902 = ['-1902_27_TeamMH_TeamA3.csv','-1902_26_TeamMH_TeamA3.csv','-1902_25_TeamMH_TeamA3.csv',
                  '-1902_12_TeamMI_TeamA3.csv','-1902_11_TeamMI_TeamA3.csv','-1902_10_TeamMI_TeamA3.csv',
                  '-1902_03_TeamMG_TeamA3.csv', '-1902_02_TeamMG_TeamA3.csv','-1902_01_TeamMG_TeamA3.csv']

gamelistA31901 = ['-1901_18_TeamLH_TeamA3.csv','-1901_17_TeamLH_TeamA3.csv','-1901_16_TeamLH_TeamA3.csv',
                  # '-1901_06_TeamLI_TeamA3.csv', missing left fielder info caused error
                  # '-1901_05_TeamLI_TeamA3.csv', ##has no dropped file

                  '-1901_04_TeamLI_TeamA3.csv',
                  '-1901_03_TeamLG_TeamA3.csv',
                  '-1901_02_TeamLG_TeamA3.csv','-1901_01_TeamLG_TeamA3.csv']

gamelistA21903 = ['-1903_30_TeamNF_TeamA2.csv','-1903_29_TeamNF_TeamA2.csv','-1903_28_TeamNF_TeamA2.csv',
                  '-1903_07_TeamND_TeamA2.csv','-1903_06_TeamND_TeamA2.csv','-1903_05_TeamND_TeamA2.csv',
                  '-1903_03_TeamNE_TeamA2.csv', '-1903_02_TeamNE_TeamA2.csv','-1903_01_TeamNE_TeamA2.csv']

gamelistA21902 = ['-1902_31_TeamMF_TeamA2.csv','-1902_30_TeamMF_TeamA2.csv','-1902_29_TeamMF_TeamA2.csv',
                  '-1902_21_TeamME_TeamA2.csv','-1902_20_TeamME_TeamA2.csv','-1902_19_TeamME_TeamA2.csv',
                  '-1902_16_TeamMD_TeamA2.csv', '-1902_14_TeamMD_TeamA2.csv','-1902_13_TeamMD_TeamA2.csv']

gamelistA11903 = ['-1903_32_TeamNB_TeamA1.csv','-1903_31_TeamNB_TeamA1.csv',
                  # '-1903_30_TeamNB_TeamA1.csv', no caught data
                  # '-1903_24_TeamNA_TeamA1.csv', Also called an error message not included
                  '-1903_23_TeamNA_TeamA1.csv','-1903_22_TeamNA_TeamA1.csv',
                  '-1903_12_TeamNC_TeamA1.csv', '-1903_11_TeamNC_TeamA1.csv','-1903_04_TeamNC_TeamA1.csv']

gamelistA11902 = ['-1902_28_TeamMC_TeamA1.csv','-1902_26_TeamMC_TeamA1.csv','-1902_24_TeamMA_TeamA1.csv',
                  '-1902_23_TeamMA_TeamA1.csv','-1902_22_TeamMA_TeamA1.csv','-1902_18_TeamMB_TeamA1.csv',
                  '-1902_17_TeamMB_TeamA1.csv']

gamelistB1903 = ['-1903_27_TeamNK_TeamB.csv','-1903_26_TeamNK_TeamB.csv','-1903_25_TeamNK_TeamB.csv',
                  '-1903_21_TeamNL_TeamB.csv','-1903_20_TeamNL_TeamB.csv','-1903_19_TeamNL_TeamB.csv',
                  '-1903_10_TeamNJ_TeamB.csv', '-1903_09_TeamNJ_TeamB.csv','-1903_08_TeamNJ_TeamB.csv']

gamelistB1902 = ['-1902_15_TeamMK_TeamB.csv','-1902_14_TeamMK_TeamB.csv','-1902_13_TeamMK_TeamB.csv',
                  '-1902_09_TeamMJ_TeamB.csv','-1902_08_TeamMJ_TeamB.csv','-1902_07_TeamMJ_TeamB.csv',
                  # '-1902_06_TeamML_TeamB.csv', Also had issues with this one
                  # '-1902_05_TeamML_TeamB.csv', also had issues
                 '-1902_04_TeamML_TeamB.csv']

gamelistB1901 = ['-1901_15_TeamLL_TeamB.csv','-1901_14_TeamLL_TeamB.csv','-1901_13_TeamLL_TeamB.csv',
                  '-1901_12_TeamLJ_TeamB.csv','-1901_11_TeamLJ_TeamB.csv','-1901_10_TeamLJ_TeamB.csv',
                  '-1901_09_TeamLK_TeamB.csv', '-1901_08_TeamLK_TeamB.csv',
                #  '-1901_07_TeamLK_TeamB.csv'also had issues
                 ]

gamelistB1900 = [
                # '-1900_09_TeamKK_TeamB.csv', also had issues
                #  '-1900_08_TeamKL_TeamB.csv', no dropped situations
                # '-1900_07_TeamKL_TeamB.csv' also had issues
                  # '-1900_06_TeamKL_TeamB.csv', also had issues
                # '-1900_05_TeamKK_TeamB.csv', also had issues
                # '-1900_04_TeamKK_TeamB.csv',
                  # '-1900_03_TeamKJ_TeamB.csv',
                # '-1900_02_TeamKJ_TeamB.csv', no dropped situations
                # '-1900_01_TeamKJ_TeamB.csv'
                ]

TeamA3 = list(itertools.chain(gamelistA31903,
                              gamelistA31902,
                              gamelistA31901))

TeamA2 = list(itertools.chain(gamelistA21903,
                              gamelistA21902))


TeamA1 = list(itertools.chain(gamelistA11903,
                              gamelistA11902))

TeamB1 = list(itertools.chain(gamelistB1903,
                              gamelistB1902,
                              gamelistB1901,
                              gamelistB1900))
allworkingcsvs = list(itertools.chain(TeamA1,TeamA2,TeamA2,TeamB1))

"""#Importing TeamA3 files"""

# @title
#List of all of the files we used
CSVfileCaughtkeysA3 = pd.DataFrame()
CSVfileDroppedkeysA3 = pd.DataFrame()
for n in TeamA3:
  # print(n)

  Caught = pd.read_csv(f'drive/MyDrive/SMT_Data_Challenge/TeamCSVFiles/{n} Backup Caught.csv')
  Caughtkeys = Caught[["Players who Backed up"]].dropna().copy()

  Dropped = pd.read_csv(f'drive/MyDrive/SMT_Data_Challenge/TeamCSVFiles/{n} Backup Dropped.csv')
  Droppedkeys = Dropped[["Players who Backed up"]].dropna().copy()

  CSVfileDroppedkeysA3 = pd.concat([CSVfileDroppedkeysA3, Droppedkeys])
  CSVfileCaughtkeysA3 = pd.concat([CSVfileCaughtkeysA3, Caughtkeys])

#Counting how many times each player backed up other outfielders
abccaught = CSVfileCaughtkeysA3[CSVfileCaughtkeysA3['Players who Backed up'].shift(-1) != CSVfileCaughtkeysA3['Players who Backed up']].copy()
playerbackupcaught = abccaught['Players who Backed up'].dropna().tolist()
A3CRCaught = playerbackupcaught.count('CR')
A3CLCaught = playerbackupcaught.count('CL')
A3RCCaught = playerbackupcaught.count('RC')
A3LCCaught = playerbackupcaught.count('LC')

abccaught = CSVfileDroppedkeysA3[CSVfileDroppedkeysA3['Players who Backed up'].shift(-1) != CSVfileDroppedkeysA3['Players who Backed up']].copy()
playerbackupdropped = abccaught['Players who Backed up'].dropna().tolist()
A3CRDropped = playerbackupdropped.count('CR')
A3CLDropped = playerbackupdropped.count('CL')
A3RCDropped = playerbackupdropped.count('RC')
A3LCDropped = playerbackupdropped.count('LC')

"""#Importing TeamA2 files"""

# @title
#List of all of the files we used
CSVfileCaughtkeysA2 = pd.DataFrame()
CSVfileDroppedkeysA2 = pd.DataFrame()
for n in TeamA2:
  # print(n)

  Caught = pd.read_csv(f'drive/MyDrive/SMT_Data_Challenge/TeamCSVFiles/{n} Backup Caught.csv')
  Caughtkeys = Caught[["Players who Backed up"]].dropna().copy()

  Dropped = pd.read_csv(f'drive/MyDrive/SMT_Data_Challenge/TeamCSVFiles/{n} Backup Dropped.csv')
  Droppedkeys = Dropped[["Players who Backed up"]].dropna().copy()

  CSVfileDroppedkeysA2 = pd.concat([CSVfileDroppedkeysA2, Droppedkeys])
  CSVfileCaughtkeysA2 = pd.concat([CSVfileCaughtkeysA2, Caughtkeys])


#Counting how many times each player backed up other outfielders
abccaught = CSVfileCaughtkeysA2[CSVfileCaughtkeysA2['Players who Backed up'].shift(-1) != CSVfileCaughtkeysA2['Players who Backed up']].copy()
playerbackupcaught = abccaught['Players who Backed up'].dropna().tolist()
A2CRCaught = playerbackupcaught.count('CR')
A2CLCaught = playerbackupcaught.count('CL')
A2RCCaught = playerbackupcaught.count('RC')
A2LCCaught = playerbackupcaught.count('LC')

abccaught = CSVfileDroppedkeysA2[CSVfileDroppedkeysA2['Players who Backed up'].shift(-1) != CSVfileDroppedkeysA2['Players who Backed up']].copy()
playerbackupdropped = abccaught['Players who Backed up'].dropna().tolist()
A2CRDropped = playerbackupdropped.count('CR')
A2CLDropped = playerbackupdropped.count('CL')
A2RCDropped = playerbackupdropped.count('RC')
A2LCDropped = playerbackupdropped.count('LC')

"""Importing TeamA1 Files"""

# @title
#List of all of the files we used
CSVfileCaughtkeysA1 = pd.DataFrame()
CSVfileDroppedkeysA1 = pd.DataFrame()
for n in TeamA1:
  # print(n)

  Caught = pd.read_csv(f'drive/MyDrive/SMT_Data_Challenge/TeamCSVFiles/{n} Backup Caught.csv')
  Caughtkeys = Caught[["Players who Backed up"]].dropna().copy()

  Dropped = pd.read_csv(f'drive/MyDrive/SMT_Data_Challenge/TeamCSVFiles/{n} Backup Dropped.csv')
  Droppedkeys = Dropped[["Players who Backed up"]].dropna().copy()

  CSVfileDroppedkeysA1 = pd.concat([CSVfileDroppedkeysA1, Droppedkeys])
  CSVfileCaughtkeysA1 = pd.concat([CSVfileCaughtkeysA1, Caughtkeys])

#Counting how many times each player backed up other outfielders
abccaught = CSVfileCaughtkeysA1[CSVfileCaughtkeysA1['Players who Backed up'].shift(-1) != CSVfileCaughtkeysA1['Players who Backed up']].copy()
playerbackupcaught = abccaught['Players who Backed up'].dropna().tolist()
A1CRCaught = playerbackupcaught.count('CR')
A1CLCaught = playerbackupcaught.count('CL')
A1RCCaught = playerbackupcaught.count('RC')
A1LCCaught = playerbackupcaught.count('LC')

abccaught = CSVfileDroppedkeysA1[CSVfileDroppedkeysA1['Players who Backed up'].shift(-1) != CSVfileDroppedkeysA1['Players who Backed up']].copy()
playerbackupdropped = abccaught['Players who Backed up'].dropna().tolist()
A1CRDropped = playerbackupdropped.count('CR')
A1CLDropped = playerbackupdropped.count('CL')
A1RCDropped = playerbackupdropped.count('RC')
A1LCDropped = playerbackupdropped.count('LC')

"""Importing TeamB files"""

# @title
#List of all of the files we used
CSVfileCaughtkeysB1 = pd.DataFrame()
CSVfileDroppedkeysB1 = pd.DataFrame()
for n in TeamB1:
  # print(n)

  Caught = pd.read_csv(f'drive/MyDrive/SMT_Data_Challenge/TeamCSVFiles/{n} Backup Caught.csv')
  Caughtkeys = Caught[["Players who Backed up", "Keys"]].dropna().copy()

  Dropped = pd.read_csv(f'drive/MyDrive/SMT_Data_Challenge/TeamCSVFiles/{n} Backup Dropped.csv')
  Droppedkeys = Dropped[["Players who Backed up", "Keys"]].dropna().copy()

  CSVfileDroppedkeysB1 = pd.concat([CSVfileDroppedkeysB1, Droppedkeys])
  CSVfileCaughtkeysB1 = pd.concat([CSVfileCaughtkeysB1, Caughtkeys])

#Counting how many times each player backed up other outfielders
abccaught = CSVfileCaughtkeysB1[CSVfileCaughtkeysB1['Players who Backed up'].shift(-1) != CSVfileCaughtkeysB1['Players who Backed up']].copy()
playerbackupcaught = abccaught['Players who Backed up'].dropna().tolist()
B1CRCaught = playerbackupcaught.count('CR')
B1CLCaught = playerbackupcaught.count('CL')
B1RCCaught = playerbackupcaught.count('RC')
B1LCCaught = playerbackupcaught.count('LC')

abccaught = CSVfileDroppedkeysB1[CSVfileDroppedkeysB1['Players who Backed up'].shift(-1) != CSVfileDroppedkeysB1['Players who Backed up']].copy()
playerbackupdropped = abccaught['Players who Backed up'].dropna().tolist()
B1CRDropped = playerbackupdropped.count('CR')
B1CLDropped = playerbackupdropped.count('CL')
B1RCDropped = playerbackupdropped.count('RC')
B1LCDropped = playerbackupdropped.count('LC')

"""#This code only needs to be run once. This concats the previous imports, so there is one file containing all team data."""

# @title
# #List of all of the files we used
# CSVfileCaught = pd.DataFrame()
# CSVfileDropped = pd.DataFrame()
# for n in TeamA3:
#   Caught = pd.read_csv(f'drive/MyDrive/SMT_Data_Challenge/TeamCSVFiles/{n} Backup Caught.csv')
#   # print(n)
#   # print(len(Caught['RightA']))
#   Dropped = pd.read_csv(f'drive/MyDrive/SMT_Data_Challenge/TeamCSVFiles/{n} Backup Dropped.csv')
#   CSVfileCaught = pd.concat([CSVfileCaught, Caught])
#   CSVfileDropped = pd.concat([CSVfileDropped, Dropped])

# print(len(CSVfileCaught['RightA']))

# for n in TeamA2:
#   Caught = pd.read_csv(f'drive/MyDrive/SMT_Data_Challenge/TeamCSVFiles/{n} Backup Caught.csv')
#   # print(n)
#   # print(len(Caught['RightA']))
#   Dropped = pd.read_csv(f'drive/MyDrive/SMT_Data_Challenge/TeamCSVFiles/{n} Backup Dropped.csv')
#   CSVfileCaught = pd.concat([CSVfileCaught, Caught])
#   CSVfileDropped = pd.concat([CSVfileDropped, Dropped])

# print(len(CSVfileCaught['RightA']))

# for n in TeamA1:
#   Caught = pd.read_csv(f'drive/MyDrive/SMT_Data_Challenge/TeamCSVFiles/{n} Backup Caught.csv')
#   print(n)
#   print(len(Caught['RightA']))
#   Dropped = pd.read_csv(f'drive/MyDrive/SMT_Data_Challenge/TeamCSVFiles/{n} Backup Dropped.csv')
#   CSVfileCaught = pd.concat([CSVfileCaught, Caught])
#   CSVfileDropped = pd.concat([CSVfileDropped, Dropped])

# print(len(CSVfileCaught['RightA']))

# for n in TeamB1:
#   Caught = pd.read_csv(f'drive/MyDrive/SMT_Data_Challenge/TeamCSVFiles/{n} Backup Caught.csv')
#   print(n)
#   print(len(Caught['RightA']))
#   Dropped = pd.read_csv(f'drive/MyDrive/SMT_Data_Challenge/TeamCSVFiles/{n} Backup Dropped.csv')
#   CSVfileCaught = pd.concat([CSVfileCaught, Caught])
#   CSVfileDropped = pd.concat([CSVfileDropped, Dropped])

# print(len(CSVfileCaught['RightA']))

# @title
# CSVfileCaught.to_csv('CSVfileCaught.csv')
# CSVfileDropped.to_csv('CSVfileDropped.csv')

"""#Printing Counts for Each Situation"""

##This needs to be counted by team because the code which determines the number relies on the preivous row to count,
##and the concated file might cause issues with this since the last play in TamA3 fle may have an LC and the first play in TeamA2 might also have LC

CRCaughttotal = A3CRCaught + A2CRCaught + A1CRCaught + B1CRCaught
print("CRCaughttotal", CRCaughttotal, "\n")
CLCaughttotal = A3CLCaught + A2CLCaught + A1CLCaught + B1CLCaught
print("CLCaughttotal", CLCaughttotal,"\n")
LCCaughttotal = A3LCCaught + A2LCCaught + A1LCCaught + B1LCCaught
print("LCCaughttotal",LCCaughttotal,"\n")
RCCaughttotal = A3RCCaught + A2RCCaught + A1RCCaught + B1RCCaught
print("RCCaughttotal",LCCaughttotal,"\n")
CRDroppedtotal = A3CRDropped + A2CRDropped + A1CRDropped + B1CRDropped
print("CRDroppedtotal",LCCaughttotal,"\n")
CLDroppedtotal = A3CLDropped + A2CLDropped + A1CLDropped + B1CLDropped
print("CLDroppedtotal",CLDroppedtotal,"\n")
LCDroppedtotal = A3LCDropped + A2LCDropped + A1LCDropped + B1LCDropped
print("LCDroppedtotal",LCDroppedtotal,"\n")
RCDroppedtotal = A3RCDropped + A2RCDropped + A1RCDropped + B1RCDropped
print("RCDroppedtotal",RCDroppedtotal,"\n")

totalcaught = CRCaughttotal +CLCaughttotal+LCCaughttotal+RCCaughttotal
print("total caught",totalcaught,"\n")
totaldropped = CRDroppedtotal+CLDroppedtotal+LCDroppedtotal+RCDroppedtotal
print("total dropped",totaldropped,"\n")

"""###Plotting the information form above"""

plt.figure(figsize=(15, 8))
plt.scatter("Center behind Right", CRDroppedtotal, color = 'red', label = 'Caught', zorder=10)
plt.scatter("Center behind Right", CRCaughttotal, color = 'blue', label = 'Dropped', zorder=10)

plt.scatter("Center behind Left", CLDroppedtotal, color = 'red')
plt.scatter("Center behind Left", CLCaughttotal, color = 'blue')

plt.scatter("Left behind Center", LCDroppedtotal, color = 'red')
plt.scatter("Left behind Center", LCCaughttotal, color = 'blue')


plt.scatter("Right behind Center",LCDroppedtotal, color = 'red')
plt.scatter("Right behind Center",LCCaughttotal, color = 'blue')

plt.legend()
plt.title("Backup Combination Counts")
plt.ylabel("Number of Appearances")
plt.xlabel("Who backed up whom?")

plt.savefig(f"playnumbers.jpg")
plt.show

"""#Importing the concated file of all dropped and caught fly-ball plays in which a player backup situation occured"""

# @title
CSVfileCaught = pd.read_csv(f'drive/MyDrive/SMT_Data_Challenge/TeamCSVFiles/CSVfileCaught.csv')
CSVfileDropped = pd.read_csv(f'drive/MyDrive/SMT_Data_Challenge/TeamCSVFiles/CSVfileDropped.csv')

"""#Examining Backup Situations in which the Fly-ball was dropped"""

##dropped
leftxdropped = CSVfileDropped['leftfieldx'].dropna()
leftydropped = CSVfileDropped['leftfieldyy'].dropna()

rightxdropped = CSVfileDropped['rightfieldx'].dropna()
rightydropped = CSVfileDropped['rightfieldy'].dropna()

centerxdropped = CSVfileDropped['centerx'].dropna()
centerydropped = CSVfileDropped['centery'].dropna()


centervdropped = CSVfileDropped['centerV'].dropna()
centeradropped = CSVfileDropped['centerA'].dropna()

rightvdropped = CSVfileDropped['RightV'].dropna()
rightadropped = CSVfileDropped['RightA'].dropna()

leftvdropped = CSVfileDropped['LeftV'].dropna()
leftadropped = CSVfileDropped['LeftA'].dropna()

ballvdropped = CSVfileDropped['BallV'].dropna()
balladropped = CSVfileDropped['BallA'].dropna()

if 'Right time' not in list(CSVfileDropped):
    pass
else:
  righttimedropped = CSVfileDropped['Right time'].dropna()
  lefttimedropped = CSVfileDropped['Left time'].dropna()
  centertimedropped = CSVfileDropped['Center time'].dropna()
  balltimedropped = CSVfileDropped['Ball time'].dropna()

##normalizing the data
leftxdroppedNorm = normalization(leftxdropped).tolist()
leftydroppedNorm = normalization(leftydropped).tolist()

rightxdroppedNorm = normalization(rightxdropped).tolist()
rightydroppedNorm = normalization(rightydropped).tolist()

centerxdroppedNorm = normalization(centerxdropped).tolist()
centerydroppedNorm = normalization(centerydropped).tolist()


centervdroppedNorm = normalization(centervdropped).tolist()
centeradroppedNorm = normalization(centeradropped).tolist()

rightvdroppedNorm = normalization(rightvdropped).tolist()
rightadroppedNorm = normalization(rightadropped).tolist()

leftvdroppedNorm = normalization(leftvdropped).tolist()
leftadroppedNorm = normalization(leftadropped).tolist()

ballvdroppedNorm = normalization(ballvdropped).tolist()
balladroppedNorm = normalization(balladropped).tolist()

#Since some data was exported without time data, this code block accounts for
# this and allows the code to run with or without time being accounted for
if 'Right time' not in list(CSVfileDropped):
    a = 4
    pass
else:
  righttimedroppedNorm = normalization(righttimedropped).tolist()
  lefttimedroppedNorm = normalization(lefttimedropped).tolist()
  centertimedroppedNorm = normalization(centertimedropped).tolist()
  balltimecaughtNorm  = normalization(balltimedropped).tolist()

"""#Prepping Caught Plays"""

##caught
leftxcaught = CSVfileCaught['leftfieldx'].dropna()
leftycaught = CSVfileCaught['leftfieldyy'].dropna()

rightxcaught = CSVfileCaught['rightfieldx'].dropna()
rightycaught = CSVfileCaught['rightfieldy'].dropna()

centerxcaught = CSVfileCaught['centerx'].dropna()
centerycaught = CSVfileCaught['centery'].dropna()


centervcaught = CSVfileCaught['centerV'].dropna()
centeracaught = CSVfileCaught['centerA'].dropna()

rightvcaught = CSVfileCaught['RightV'].dropna()
rightacaught = CSVfileCaught['RightA'].dropna()

leftvcaught = CSVfileCaught['LeftV'].dropna()
leftacaught = CSVfileCaught['LeftA'].dropna()

ballvcaught = CSVfileCaught['BallV'].dropna()
ballacaught = CSVfileCaught['BallA'].dropna()

if 'Right time' not in list(CSVfileCaught):
    a = 4
    pass
else:
  righttimecaught = CSVfileCaught['Right time'].dropna()
  lefttimecaught = CSVfileCaught['Left time'].dropna()
  centertimecaught = CSVfileCaught['Center time'].dropna()
  balltimecaught  = CSVfileCaught['Ball time'].dropna()

##Normalizing the Data
leftxcaughtNorm = normalization(leftxcaught).tolist()
leftycaughtNorm = normalization(leftycaught).tolist()

rightxcaughtNorm = normalization(rightxcaught).tolist()
rightycaughtNorm = normalization(rightycaught).tolist()

centerxcaughtNorm = normalization(centerxcaught).tolist()
centerycaughtNorm = normalization(centerycaught).tolist()


centervcaughtNorm = normalization(centervcaught).tolist()
centeracaughtNorm = normalization(centeracaught).tolist()

rightvcaughtNorm = normalization(rightvcaught).tolist()
rightacaughtNorm = normalization(rightacaught).tolist()

leftvcaughtNorm = normalization(leftvcaught).tolist()
leftacaughtNorm = normalization(leftacaught).tolist()

ballvcaughtNorm = normalization(ballvcaught).tolist()
ballacaughtNorm = normalization(ballacaught).tolist()

if 'Right time' not in list(CSVfileCaught):
    a = 4
    pass
else:
  righttimecaughtNorm = normalization(righttimecaught).tolist()
  lefttimecaughtNorm = normalization(lefttimecaught).tolist()
  centertimecaughtNorm = normalization(centertimecaught).tolist()
  balltimecaughtNorm  = normalization(balltimecaught).tolist()

"""#Checking the Variance for Each variable"""

print("Center Velocity (Dropped)", statistics.variance(centervdroppedNorm))
print("Center Velocity (Caught)", statistics.variance(centervcaughtNorm), "\n")
print("Center Acceleration (Dropped)", statistics.variance(centervdroppedNorm))
print("Center Acceleration (Caught)", statistics.variance(centeracaughtNorm), "\n")
print("Center X (Dropped)", statistics.variance(centerxdroppedNorm))
print("Center X (Caught)", statistics.variance(centerxcaughtNorm), "\n")
print("Center Y (Dropped)", statistics.variance(centerydroppedNorm))
print("Center Y (Caught)", statistics.variance(centerycaughtNorm), "\n")

print("Right Velocity (Dropped)", statistics.variance(rightvdroppedNorm))
print("Right Velocity (Caught)", statistics.variance(rightvcaughtNorm), "\n")
print("Right Acceleration (Dropped)", statistics.variance(rightadroppedNorm))
print("Right Acceleration (Caught)", statistics.variance(rightacaughtNorm), "\n")

print("Right X (Dropped)", statistics.variance(rightxdroppedNorm))
print("Right X (Caught)", statistics.variance(rightxcaughtNorm), "\n")

print("Right Y (Dropped)", statistics.variance(rightydroppedNorm))
print("Right Y (Caught)", statistics.variance(rightycaughtNorm), "\n")


print("Left Velocity (Dropped)", statistics.variance(leftvdroppedNorm))
print("Left Velocity (Caught)", statistics.variance(leftvcaughtNorm), "\n")
print("Left Acceleration (Dropped)", statistics.variance(leftadroppedNorm))
print("Left Acceleration (Caught)", statistics.variance(leftacaughtNorm), "\n")
print("Left X (Dropped)", statistics.variance(leftxdroppedNorm))
print("Left X (Caught)", statistics.variance(leftxcaughtNorm), "\n")
print("Left Y (Dropped)", statistics.variance(leftydroppedNorm))
print("Left Y (Caught)", statistics.variance(leftycaughtNorm), "\n")

print("Ball Velocity (Dropped)", statistics.variance(ballvdroppedNorm))
print("Ball Velocity (Caught)", statistics.variance(ballvcaughtNorm), "\n")
print("Ball Acceleration (Dropped)", statistics.variance(balladroppedNorm))
print("Ball Acceleration (Caught)", statistics.variance(ballacaughtNorm), "\n")

"""#Filtering with FFT as well as calculating area under the curve
Amplitude cutoff can be automated using the input functions. However, the input functions are currently commented out.

##Rightfield

###X-Position
"""

##Run the first function to examine where the cutoff freq. should be set.
smoothing(rightxcaughtNorm)
amp_cutoff = float(2)

# print("Which amp_cutoff would you like to use?")
# amp_cutoff = float(input())

ax_filt_rightxcaughtNorm = smoothing2(amp_cutoff, rightxcaughtNorm )

##Find the median and the sum of filtered data. The median is the new x = "0" axis
rightss = distances(ax_filt_rightxcaughtNorm)
rightxcaughtSUM = round(sum(rightss),2)
# print(rightxcaughtSUM)

"""#Example of taking the area under the curve"""

ax_filt_rightxcaughtNormnew = [n.real for n in ax_filt_rightxcaughtNorm]
len(ax_filt_rightxcaughtNormnew)
index = list(range(0, len(ax_filt_rightxcaughtNormnew)))
index
plt.figure(figsize=(20,3))

##Plotted the Median
plt.axhline(y = 0.645, color = 'r', linestyle = '-')


plt.plot(index, ax_filt_rightxcaughtNormnew)
plt.title("Rightfield X-Position vs Index Number (Caught)")
plt.fill_between(index, ax_filt_rightxcaughtNormnew, .45,color='green', alpha=0.4)

plt.xlim(0,len(ax_filt_rightxcaughtNormnew))
plt.xlabel("Index Number")
plt.ylabel("Normalized Value")
plt.grid()
plt.savefig(f"filtered.jpg")
# plt.plot(rightxcaught)

"""Right X-position Dropped"""

smoothing(rightxdroppedNorm)

print("Which amp_cutoff would you like to use?")
# amp_cutoff = float(input())
amp_cutoff = float(.5)

ax_filt_rightxdroppedNorm = smoothing2(amp_cutoff, rightxdroppedNorm)

rightss = distances(ax_filt_rightxdroppedNorm)
rightxdroppedSUM = round(sum(rightss),2)
print(rightxdroppedSUM)

"""Right Y-Position Caught"""

smoothing(rightycaughtNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(.25)
ax_filt_rightycaughtNorm = smoothing2(amp_cutoff, rightycaughtNorm)

rightss = distances(ax_filt_rightycaughtNorm)
rightycaughtSUM = round(sum(rightss),2)
print(rightycaughtSUM)

"""Right y-position Dropped"""

smoothing(rightydroppedNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(.25)
ax_filt_rightydroppedNorm = smoothing2(amp_cutoff, rightydroppedNorm)

rightss = distances(ax_filt_rightydroppedNorm)
rightydroppedSUM = round(sum(rightss),2)
print(rightydroppedSUM)

"""#right Velocity caught"""

smoothing(rightvcaughtNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(.10)
ax_filt_rightvcaughtNorm = smoothing2(amp_cutoff,rightvcaughtNorm )

rightss = distances(ax_filt_rightvcaughtNorm)
rightvcaughtSUM = round(sum(rightss),2)
print(rightvcaughtSUM)

"""Right Velocity Dropped"""

smoothing(rightvdroppedNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(.10)
ax_filt_rightxdroppedNorm = smoothing2(amp_cutoff, rightvdroppedNorm)

rightss = distances(ax_filt_rightxdroppedNorm)
rightvdroppedSUM = round(sum(rightss),2)
print(rightvdroppedSUM)

"""###Acceleration

Caught
"""

smoothing(rightacaughtNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(.10)
ax_filt_rightxcaughtNorm = smoothing2(amp_cutoff, rightacaughtNorm)

rightss = distances(ax_filt_rightxcaughtNorm)
rightacaughtSUM = round(sum(rightss),2)
total = len(rightss)
newrightacaught = rightacaughtSUM/total
print(rightacaughtSUM)

"""Right Acceleration Dropped"""

smoothing(rightadroppedNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(.10)
ax_filt_rightxdroppedNorm = smoothing2(amp_cutoff, rightadroppedNorm)

rightss = distances(ax_filt_rightxdroppedNorm)
rightadroppedSUM = round(sum(rightss),2)
total = len(rightss)
newrightadropped = rightadroppedSUM/total

print(rightadroppedSUM)

"""#Leftfield

##x-position

Caught
"""

##needs to be run in a separate cell than the one before this.
smoothing(leftxcaughtNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(.25)
ax_filt_leftxcaughtNorm = smoothing2(amp_cutoff,leftxcaughtNorm)

##now we run the filtered data and then find the median and the sum. The median is the new x = "0" axis
rightss = distances(ax_filt_leftxcaughtNorm)
leftxcaughtSUM = round(sum(rightss),2)
print(leftxcaughtSUM)

"""Dropped"""

##needs to be run in a separate cell than the one before this.
smoothing(leftxdroppedNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(.3)
ax_filt_leftxdroppedNorm = smoothing2(amp_cutoff, leftxdroppedNorm)

##now we run the filtered data and then find the median and the sum. The median is the new x = "0" axis
rightss = distances(ax_filt_leftxdroppedNorm)
leftxdroppedSUM = round(sum(rightss),2)
print(leftxdroppedSUM)

"""##y-position

Caught
"""

##needs to be run in a separate cell than the one before this.
smoothing(leftycaughtNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(.2)
ax_filt_leftycaughtNorm = smoothing2(amp_cutoff, leftycaughtNorm)

##now we run the filtered data and then find the median and the sum. The median is the new x = "0" axis
rightss = distances(ax_filt_leftycaughtNorm)
leftycaughtSUM = round(sum(rightss),2)
print(leftycaughtSUM)

ax_filt_leftycaughtNormnew = [n.real for n in ax_filt_leftycaughtNorm]
len(ax_filt_leftycaughtNormnew)
index = list(range(0, len(ax_filt_leftycaughtNormnew)))
index
plt.figure(figsize=(10,5))
plt.axhline(y = 0.667, color = 'r', linestyle = '-')
plt.plot(index, ax_filt_leftycaughtNormnew)
plt.title("Rightfield X-Position vs Index Number (Caught)")
plt.fill_between(index, ax_filt_leftycaughtNormnew, .667,color='green', alpha=0.4)

plt.xlim(0,len(ax_filt_leftycaughtNormnew))
plt.xlabel("Index Number")
plt.ylabel("Normalized Value")
plt.grid()
# plt.savefig(f"filtered.jpg")
# plt.plot(rightxcaught)

"""###Left y-position Dropped"""

##needs to be run in a separate cell than the one before this.
smoothing(leftydroppedNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(2)
ax_filt_leftydroppedNorm = smoothing2(amp_cutoff, leftydroppedNorm)

##now we run the filtered data and then find the median and the sum. The median is the new x = "0" axis
rightss = distances(ax_filt_leftydroppedNorm)
leftydroppedSUM = round(sum(rightss),2)
print(leftydroppedSUM)

"""### Left Velocity Caught"""

##needs to be run in a separate cell than the one before this.
smoothing(leftvcaughtNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(.2)
ax_filt_leftvcaughtNorm = smoothing2(amp_cutoff, leftvcaughtNorm)

##now we run the filtered data and then find the median and the sum. The median is the new x = "0" axis
rightss = distances(ax_filt_leftvcaughtNorm)
leftvcaughtSUM = round(sum(rightss),2)
print(leftvcaughtSUM)

"""###Left velocity Dropped"""

##needs to be run in a separate cell than the one before this.
smoothing(leftvdroppedNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(.16)
ax_filt_leftvdroppedNorm = smoothing2(amp_cutoff, leftvdroppedNorm)

##now we run the filtered data and then find the median and the sum. The median is the new x = "0" axis
rightss = distances(ax_filt_leftvdroppedNorm)
leftvdroppedSUM = round(sum(rightss),2)
print(leftvdroppedSUM)

"""##Leftfield Acceleration Caught"""

##needs to be run in a separate cell than the one before this.
smoothing(leftacaughtNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(.2)
ax_filt_leftacaughtNorm = smoothing2(amp_cutoff, leftacaughtNorm)

##now we run the filtered data and then find the median and the sum. The median is the new x = "0" axis
rightss = distances(ax_filt_leftacaughtNorm)
leftacaughtSUM = round(sum(rightss),2)
print(leftacaughtSUM)

"""##Leftfield Acceleration Dropped"""

##needs to be run in a separate cell than the one before this.
smoothing(leftadroppedNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(.2)
ax_filt_leftadroppedNorm = smoothing2(amp_cutoff, leftadroppedNorm)

##now we run the filtered data and then find the median and the sum. The median is the new x = "0" axis
rightss = distances(ax_filt_leftadroppedNorm)
leftadroppedSUM = round(sum(rightss),2)
print(leftadroppedSUM)

"""#Centerfield

##Centerfield X-Position Caught
"""

##needs to be run in a separate cell than the one before this.
smoothing(centerxcaughtNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(.2)
ax_filt_centerxcaughtNorm = smoothing2(amp_cutoff, centerxcaughtNorm)

##now we run the filtered data and then find the median and the sum. The median is the new x = "0" axis
rightss = distances(ax_filt_centerxcaughtNorm)
centerxcaughtSUM = round(sum(rightss),2)
print(centerxcaughtSUM)

"""##Centerfield X-Position Dropped

"""

##needs to be run in a separate cell than the one before this.
smoothing(centerxdroppedNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(.4)
ax_filt_centerxdroppedNorm = smoothing2(amp_cutoff, centerxdroppedNorm)

##now we run the filtered data and then find the median and the sum. The median is the new x = "0" axis
rightss = distances(ax_filt_centerxdroppedNorm)
centerxdroppedSUM = round(sum(rightss),2)
print(centerxdroppedSUM)

"""##Centerfield Y\-Position Caught"""

##needs to be run in a separate cell than the one before this.
smoothing(centerycaughtNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(2)
ax_filt_centerycaughtNorm = smoothing2(amp_cutoff, centerycaughtNorm)

##now we run the filtered data and then find the median and the sum. The median is the new x = "0" axis
rightss = distances(ax_filt_centerycaughtNorm)
centerycaughtSUM = round(sum(rightss),2)
print(centerycaughtSUM)

"""##Centerfield Y-Position Dropped"""

##needs to be run in a separate cell than the one before this.
smoothing(centerydroppedNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(2)
ax_filt_centerydroppedNorm = smoothing2(amp_cutoff, centerydroppedNorm)

##now we run the filtered data and then find the median and the sum. The median is the new x = "0" axis
rightss = distances(ax_filt_centerydroppedNorm)
centerydroppedSUM = round(sum(rightss),2)
print(centerydroppedSUM)

"""##Centerfield Velocity Caught"""

##needs to be run in a separate cell than the one before this.
smoothing(centervcaughtNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(1)
ax_filt_centervcaughtNorm = smoothing2(amp_cutoff, centervcaughtNorm)

##now we run the filtered data and then find the median and the sum. The median is the new x = "0" axis
rightss = distances(ax_filt_centervcaughtNorm)
centervcaughtSUM = round(sum(rightss),2)
print(centervcaughtSUM)

ax_filt_centervcaughtNormnew = [n.real for n in ax_filt_centervcaughtNorm]
len(ax_filt_centervcaughtNormnew)
index = list(range(0, len(ax_filt_centervcaughtNormnew)))
index
plt.figure(figsize=(10,5))
plt.axhline(y = 0.667, color = 'r', linestyle = '-')
plt.plot(index, ax_filt_centervcaughtNormnew)
plt.title("Rightfield X-Position vs Index Number (Caught)")
plt.fill_between(index, ax_filt_centervcaughtNormnew, .667,color='green', alpha=0.4)

plt.xlim(0,len(ax_filt_centervcaughtNormnew))
plt.xlabel("Index Number")
plt.ylabel("Normalized Value")
plt.grid()
# plt.savefig(f"filtered.jpg")
# plt.plot(rightxcaught)

"""##Centerfield Velocity dropped"""

##needs to be run in a separate cell than the one before this.
smoothing(centervdroppedNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(.22)
ax_filt_centervdroppedNorm = smoothing2(amp_cutoff, centervdroppedNorm)

##now we run the filtered data and then find the median and the sum. The median is the new x = "0" axis
rightss = distances(ax_filt_centervdroppedNorm)
centervdroppedSUM = round(sum(rightss),2)
print(centervdroppedSUM)

"""##Acceleration

##Centerfield Acceleration Caught
"""

##needs to be run in a separate cell than the one before this.
smoothing(centeracaughtNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(.9)
ax_filt_centeracaughtNorm = smoothing2(amp_cutoff, centeracaughtNorm)

##now we run the filtered data and then find the median and the sum. The median is the new x = "0" axis
rightss = distances(ax_filt_centeracaughtNorm)
centeracaughtSUM = round(sum(rightss),2)
print(centeracaughtSUM)

##Centerfield Acceleration Caught

##needs to be run in a separate cell than the one before this.
smoothing(centeradroppedNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(.22)
ax_filt_centeradroppedNorm = smoothing2(amp_cutoff, centeradroppedNorm)

##now we run the filtered data and then find the median and the sum. The median is the new x = "0" axis
rightss = distances(ax_filt_centeradroppedNorm)
centeradroppedSUM = round(sum(rightss),2)
print(centeradroppedSUM)

ax_filt_centeradroppedNormnew = [n.real for n in ax_filt_centeradroppedNorm]
len(ax_filt_centeradroppedNormnew)
index = list(range(0, len(ax_filt_centeradroppedNormnew)))
index
plt.figure(figsize=(40,10))
plt.axhline(y = 0.04785, color = 'r', linestyle = '-')
plt.plot(index, ax_filt_centeradroppedNormnew)
plt.title("Rightfield X-Position vs Index Number (Caught)")
plt.fill_between(index, ax_filt_centeradroppedNormnew, .04785,color='green', alpha=0.4)

plt.xlim(0,len(ax_filt_centeradroppedNormnew))
plt.xlabel("Index Number")
plt.ylabel("Normalized Value")
plt.grid()
# plt.savefig(f"filtered.jpg")
# plt.plot(rightxcaught)

"""#Ball

##Ball Velocity Caught
"""

##needs to be run in a separate cell than the one before this.
smoothing(ballvcaughtNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(.55)
ax_filt_ballvcaughtNorm = smoothing2(amp_cutoff, ballvcaughtNorm)

##now we run the filtered data and then find the median and the sum. The median is the new x = "0" axis
rightss = distances(ax_filt_ballvcaughtNorm)
ballvcaughtSUM = round(sum(rightss),2)
print(ballvcaughtSUM)

"""#Ball Velocity Dropped"""

##needs to be run in a separate cell than the one before this.
smoothing(ballvdroppedNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(.22)
ax_filt_ballvdroppedNorm = smoothing2(amp_cutoff, ballvdroppedNorm)

##now we run the filtered data and then find the median and the sum. The median is the new x = "0" axis
rightss = distances(ax_filt_ballvdroppedNorm)
ballvdroppedSUM = round(sum(rightss),2)
print(ballvdroppedSUM)

"""##Ball Acceleration Caught"""

##needs to be run in a separate cell than the one before this.
smoothing(ballacaughtNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(.55)
ax_filt_ballacaughtNorm = smoothing2(amp_cutoff, ballacaughtNorm)

##now we run the filtered data and then find the median and the sum. The median is the new x = "0" axis
rightss = distances(ax_filt_ballacaughtNorm)
ballacaughtSUM = round(sum(rightss),2)
print(ballacaughtSUM)

"""##Ball Acceleration Dropped"""

##needs to be run in a separate cell than the one before this.
smoothing(balladroppedNorm)

##now we get the filtered data by determining the cutoff
print("Which amp_cutoff would you like to use?")
amp_cutoff = float(.22)
ax_filt_balladroppedNorm = smoothing2(amp_cutoff, balladroppedNorm)

##now we run the filtered data and then find the median and the sum. The median is the new x = "0" axis
rightss = distances(ax_filt_balladroppedNorm)

balladroppedSUM = round(sum(rightss),2)
print(balladroppedSUM)

"""##A Plot displaying all y-positions together"""

plt.figure(figsize=(20,3))

plt.plot(ax_filt_centerycaughtNorm, label = 'Center')
plt.plot(ax_filt_leftycaughtNorm, label = 'Left')
plt.plot(ax_filt_rightycaughtNorm, label = 'Right')
plt.legend()

"""##Creating a dataframe to use for statistical analysis"""

Stats = pd.DataFrame()
Stats['Ball Velocity']= ballvcaughtSUM
Stats['Ball Acceleration']= ballacaughtSUM

Stats['Right Acceleration']= rightacaughtSUM
Stats['Left Acceleration']= leftacaughtSUM
Stats['Center Acceleration']= centeracaughtSUM

Stats['Right Velocity']= rightvcaughtSUM
Stats['Left Velocity']= leftvcaughtSUM
Stats['Center Velocity']= centervcaughtSUM

Stats['Left X Position'] = leftxcaughtSUM
Stats['Right X Position'] = rightxcaughtSUM
Stats['Center X Position'] = centerxcaughtSUM

Stats['Left Y Position'] = leftycaughtSUM
Stats['Right Y Position'] = rightycaughtSUM
Stats['Center Y Position'] = centerycaughtSUM

#we did not include time in the analysis.
# if a == 4:
#   pass

# else:
#   Stats['Left Time'] = Ilefttime
#   Stats['Center Time'] = Icentertime
#   Stats['Right Time'] = Irighttime
#   Stats['Ball Time'] = Iballtime

Stats.head()
Stats.loc["Caught"] = [ballvcaughtSUM, ballacaughtSUM, rightacaughtSUM,leftacaughtSUM,centeracaughtSUM,rightvcaughtSUM,leftvcaughtSUM, centervcaughtSUM,
                   leftxcaughtSUM, rightxcaughtSUM, centerxcaughtSUM, leftycaughtSUM,rightycaughtSUM, centerycaughtSUM ]
Stats.loc["Dropped"] = [ballvdroppedSUM, balladroppedSUM, rightadroppedSUM,leftadroppedSUM,centeradroppedSUM,rightvdroppedSUM,leftvdroppedSUM, centervdroppedSUM,
                   leftxdroppedSUM, rightxdroppedSUM, centerxdroppedSUM, leftydroppedSUM,rightydroppedSUM, centerydroppedSUM ]
Stats.loc['Difference'] =  Stats.loc["Caught"] - Stats.loc["Dropped"]

#Function to style the tables
def highlight_negative(val):
    if val < 0:
        #red
        return 'background-color: rgba(205,51,51, .3)'

    if val < 100 and val > 0:
        #brown
        return 'background-color: rgba(156,102,31, .3)'

    if val > 0:
        #purple
        return 'background-color: rgba(61,89,171, .3)'

    else:
        return 'background-color: rgba(238,201,0, .3)'

print("Total Deviation from Average")
# Stats = Stats.round(2)
Stats.style.applymap(highlight_negative, subset=pd.IndexSlice['Difference', :])

##X and Y positions
XandY = Stats[['Left X Position', 'Right X Position', 'Center X Position', "Left Y Position", 'Right Y Position', 'Center Y Position']].copy()
XandY.style.applymap(highlight_negative, subset=pd.IndexSlice['Difference', :])

##Velocity and Acceleration
VandA = Stats[['Ball Acceleration', 'Left Acceleration','Center Acceleration', 'Right Acceleration', 'Ball Velocity', 'Left Velocity', 'Right Velocity', 'Center Velocity']].copy()
VandA.style.applymap(highlight_negative, subset=pd.IndexSlice['Difference', :])